
P:/comp_org_lab/Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	a8 09 00 00 b4 09 00 00 c0 09 00 00 cc 09 00 00     ................
  30:	d8 09 00 00 68 0e 00 00 50 08 00 00 e4 09 00 00     ....h...P.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00034a 	bl	e04 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000f50 	.word	0x00000f50

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001388 	.word	0x00001388

00000124 <__cs3_heap_start_ptr>:
 124:	000013b0 	.word	0x000013b0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001390 	.word	0x00001390
 170:	00001393 	.word	0x00001393
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001390 	.word	0x00001390
 1bc:	00001390 	.word	0x00001390
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001390 	.word	0x00001390
 200:	00000000 	.word	0x00000000
 204:	00000ef4 	.word	0x00000ef4

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000ef4 	.word	0x00000ef4
 250:	00001394 	.word	0x00001394
 254:	00000f50 	.word	0x00000f50
 258:	00000000 	.word	0x00000000

0000025c <part1>:
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/ISRs.h"
#include "./drivers/inc/int_setup.h"

int part1(){
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
 268:	ea000000 	b	270 <part1+0x14>
			HEX_flood_ASM(HEX5);

            HEX_write_ASM(toHEXDisplays, readChar);

    	}
	}
 26c:	e1a00000 	nop			; (mov r0, r0)

int part1(){

	while (1) {

        int readInteger = read_slider_switches_ASM();
 270:	eb00002a 	bl	320 <read_slider_switches_ASM>
 274:	e50b0008 	str	r0, [r11, #-8]

		write_LEDs_ASM(readInteger);		
 278:	e51b0008 	ldr	r0, [r11, #-8]
 27c:	eb000021 	bl	308 <write_LEDs_ASM>

        int toHEXDisplays = read_PB_data_ASM() & 0x0000000F;
 280:	eb000068 	bl	428 <read_PB_data_ASM>
 284:	e1a03000 	mov	r3, r0
 288:	e203300f 	and	r3, r3, #15
 28c:	e50b300c 	str	r3, [r11, #-12]

        char readChar = (char)(readInteger & 0x0000000F);
 290:	e51b3008 	ldr	r3, [r11, #-8]
 294:	e6ef3073 	uxtb	r3, r3
 298:	e203300f 	and	r3, r3, #15
 29c:	e54b300d 	strb	r3, [r11, #-13]

        int isClear = readInteger & 0x00000200;
 2a0:	e51b3008 	ldr	r3, [r11, #-8]
 2a4:	e2033c02 	and	r3, r3, #512	; 0x200
 2a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

        if (isClear) {
 2ac:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 2b0:	e3530000 	cmp	r3, #0
 2b4:	1affffec 	bne	26c <part1+0x10>
            //HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);

        } else {

            //HEX_flood_ASM(HEX4 | HEX5);
			HEX_flood_ASM(HEX4);
 2b8:	e3a00010 	mov	r0, #16
 2bc:	eb000022 	bl	34c <HEX_flood_ASM>
			HEX_flood_ASM(HEX5);
 2c0:	e3a00020 	mov	r0, #32
 2c4:	eb000020 	bl	34c <HEX_flood_ASM>

            HEX_write_ASM(toHEXDisplays, readChar);
 2c8:	e51b300c 	ldr	r3, [r11, #-12]
 2cc:	e6ef2073 	uxtb	r2, r3
 2d0:	e55b300d 	ldrb	r3, [r11, #-13]
 2d4:	e1a00002 	mov	r0, r2
 2d8:	e1a01003 	mov	r1, r3
 2dc:	eb00001f 	bl	360 <HEX_write_ASM>

    	}
	}
 2e0:	eaffffe1 	b	26c <part1+0x10>

000002e4 <main>:
	return 0;
}

int	main()	{
 2e4:	e92d4800 	push	{r11, lr}
 2e8:	e28db004 	add	r11, sp, #4
	
	/*	Part 1	*/
	return part1();
 2ec:	ebffffda 	bl	25c <part1>
 2f0:	e1a03000 	mov	r3, r0

	}
	*/	

	return	0;
}
 2f4:	e1a00003 	mov	r0, r3
 2f8:	e8bd8800 	pop	{r11, pc}

000002fc <read_LEDs_ASM>:
    .equ LED_BASE, 0xFF200000
    .global read_LEDs_ASM
    .global write_LEDs_ASM

read_LEDs_ASM: 
    LDR R1, =LED_BASE
 2fc:	e59f1018 	ldr	r1, [pc, #24]	; 31c <write_LEDs_ASM+0x14>
    LDR R0, [R1]
 300:	e5910000 	ldr	r0, [r1]
    BX LR
 304:	e12fff1e 	bx	lr

00000308 <write_LEDs_ASM>:

write_LEDs_ASM: 
	PUSH {R1}
 308:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    LDR R1, =LED_BASE
 30c:	e59f1008 	ldr	r1, [pc, #8]	; 31c <write_LEDs_ASM+0x14>
    STR R0, [R1]
 310:	e5810000 	str	r0, [r1]
	POP {R1}
 314:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    BX LR
 318:	e12fff1e 	bx	lr
    .equ LED_BASE, 0xFF200000
    .global read_LEDs_ASM
    .global write_LEDs_ASM

read_LEDs_ASM: 
    LDR R1, =LED_BASE
 31c:	ff200000 	.word	0xff200000

00000320 <read_slider_switches_ASM>:
    .text
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM:
    PUSH {R1}
 320:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    LDR R1, =SW_BASE
 324:	e59f1008 	ldr	r1, [pc, #8]	; 334 <read_slider_switches_ASM+0x14>
    LDR R0, [R1]
 328:	e5910000 	ldr	r0, [r1]
    POP {R1}
 32c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    BX LR
 330:	e12fff1e 	bx	lr
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM:
    PUSH {R1}
    LDR R1, =SW_BASE
 334:	ff200040 	.word	0xff200040

00000338 <HEX_clear_ASM>:
        .global HEX_flood_ASM
        .global HEX_write_ASM

//R1 goes to the 
HEX_clear_ASM:
		PUSH {R1, LR}          		 //Only need R1 
 338:	e92d4002 	push	{r1, lr}
        MOV R1, #0x00		  	//Set R1 to 0000000
 33c:	e3a01000 	mov	r1, #0
        BL LOAD_MULTIPLE_VAR      
 340:	eb00000d 	bl	37c <LOAD_MULTIPLE_VAR>
        POP {R1, LR}
 344:	e8bd4002 	pop	{r1, lr}
        BX LR
 348:	e12fff1e 	bx	lr

0000034c <HEX_flood_ASM>:

HEX_flood_ASM:
		PUSH {R1, LR}
 34c:	e92d4002 	push	{r1, lr}
        MOV R1, #0x7F			//Set R1 to 1111111
 350:	e3a0107f 	mov	r1, #127	; 0x7f
        BL LOAD_MULTIPLE_VAR
 354:	eb000008 	bl	37c <LOAD_MULTIPLE_VAR>
        POP {R1, LR}
 358:	e8bd4002 	pop	{r1, lr}
        BX LR
 35c:	e12fff1e 	bx	lr

00000360 <HEX_write_ASM>:

HEX_write_ASM:
		PUSH {R1, R2, R3, LR}
 360:	e92d400e 	push	{r1, r2, r3, lr}
    	LDR R2, =LOOKUP
 364:	e59f20b0 	ldr	r2, [pc, #176]	; 41c <LOOKUP+0x10>
    	LDRB R3, [R2, R1]   	//ldr but [address] address = r2 + r1
 368:	e7d23001 	ldrb	r3, [r2, r1]
    	MOV R1, R3
 36c:	e1a01003 	mov	r1, r3
        BL LOAD_MULTIPLE_VAR
 370:	eb000001 	bl	37c <LOAD_MULTIPLE_VAR>
        POP {R1, R2, R3, LR}
 374:	e8bd400e 	pop	{r1, r2, r3, lr}
        BX LR
 378:	e12fff1e 	bx	lr

0000037c <LOAD_MULTIPLE_VAR>:

LOAD_MULTIPLE_VAR:
        PUSH {R2, R3, R4, R5, R6, R7}
 37c:	e92d00fc 	push	{r2, r3, r4, r5, r6, r7}
        LDR R2, =HEX_A
 380:	e59f2098 	ldr	r2, [pc, #152]	; 420 <LOOKUP+0x14>
        LDR R3, =HEX_B
 384:	e59f3098 	ldr	r3, [pc, #152]	; 424 <LOOKUP+0x18>
		MOV R7, #0x00            
 388:	e3a07000 	mov	r7, #0
        MOV R4, #-1		//make the fist R4 after add equals to 0
 38c:	e3e04000 	mvn	r4, #0
		MOV R5, #1
 390:	e3a05001 	mov	r5, #1

00000394 <AST>:

AST:    ADD R4, R4, #1
 394:	e2844001 	add	r4, r4, #1
        CMP R4, #6
 398:	e3540006 	cmp	r4, #6
        BGE FIN
 39c:	aa000018 	bge	404 <FIN>
	//HEX1 = 00000010
	//HEX2 = 00000100
	//HEX3 = 00001000
	//HEX4 = 00010000
	//HEX5 = 00100000
        TST R0, R5, LSL R4
 3a0:	e1100415 	tst	r0, r5, lsl r4
        BEQ AST   //what is stored equals to what is asked 
 3a4:	0afffffa 	beq	394 <AST>


	LDR R6, [R2]
 3a8:	e5926000 	ldr	r6, [r2]
	CMP R4, #0  //HEX0
 3ac:	e3540000 	cmp	r4, #0
        ANDEQ R6, R6, R7    //SET R6 to 0 
 3b0:	00066007 	andeq	r6, r6, r7
        ORREQ R6, R6, R1
 3b4:	01866001 	orreq	r6, r6, r1
	CMP R4, #1
 3b8:	e3540001 	cmp	r4, #1
        ANDEQ R6, R6, R7, ROR #24  //post
 3bc:	00066c67 	andeq	r6, r6, r7, ror #24
        ORREQ R6, R6, R1, ROR #24
 3c0:	01866c61 	orreq	r6, r6, r1, ror #24
	CMP R4, #2
 3c4:	e3540002 	cmp	r4, #2
        ANDEQ R6, R6, R7, ROR #16
 3c8:	00066867 	andeq	r6, r6, r7, ror #16
        ORREQ R6, R6, R1, ROR #16
 3cc:	01866861 	orreq	r6, r6, r1, ror #16
    CMP R4, #3
 3d0:	e3540003 	cmp	r4, #3
        ANDEQ R6, R6, R7, ROR #8
 3d4:	00066467 	andeq	r6, r6, r7, ror #8
        ORREQ R6, R6, R1, ROR #8
 3d8:	01866461 	orreq	r6, r6, r1, ror #8
	STR R6, [R2]
 3dc:	e5826000 	str	r6, [r2]
		

	//display 4-5 
	LDR R6, [R3]
 3e0:	e5936000 	ldr	r6, [r3]
        CMP R4, #4
 3e4:	e3540004 	cmp	r4, #4
        ANDEQ R6, R6, R7
 3e8:	00066007 	andeq	r6, r6, r7
        ORREQ R6, R6, R1
 3ec:	01866001 	orreq	r6, r6, r1
        CMP R4, #5
 3f0:	e3540005 	cmp	r4, #5
        ANDEQ R6, R6, R7, ROR #24
 3f4:	00066c67 	andeq	r6, r6, r7, ror #24
        ORREQ R6, R6, R1, ROR #24
 3f8:	01866c61 	orreq	r6, r6, r1, ror #24
	STR R6, [R3]
 3fc:	e5836000 	str	r6, [r3]

        B AST
 400:	eaffffe3 	b	394 <AST>

00000404 <FIN>:
FIN:    POP {R2, R3, R4, R5, R6, R7}
 404:	e8bd00fc 	pop	{r2, r3, r4, r5, r6, r7}
        BX LR
 408:	e12fff1e 	bx	lr

0000040c <LOOKUP>:
 40c:	4f5b063f 	.word	0x4f5b063f
 410:	077d6d66 	.word	0x077d6d66
 414:	7c776f7f 	.word	0x7c776f7f
 418:	71795e39 	.word	0x71795e39
        POP {R1, LR}
        BX LR

HEX_write_ASM:
		PUSH {R1, R2, R3, LR}
    	LDR R2, =LOOKUP
 41c:	0000040c 	.word	0x0000040c
        POP {R1, R2, R3, LR}
        BX LR

LOAD_MULTIPLE_VAR:
        PUSH {R2, R3, R4, R5, R6, R7}
        LDR R2, =HEX_A
 420:	ff200020 	.word	0xff200020
        LDR R3, =HEX_B
 424:	ff200030 	.word	0xff200030

00000428 <read_PB_data_ASM>:
        .global PB_clear_edgecp_ASM
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
 428:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_DATA
 42c:	e59f10a8 	ldr	r1, [pc, #168]	; 4dc <disable_PB_INT_ASM+0x1c>
		LDR R0, [R1]
 430:	e5910000 	ldr	r0, [r1]
        POP {R1, LR}
 434:	e8bd4002 	pop	{r1, lr}
        BX LR
 438:	e12fff1e 	bx	lr

0000043c <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
        PUSH {R1, R2}
 43c:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_DATA
 440:	e59f1094 	ldr	r1, [pc, #148]	; 4dc <disable_PB_INT_ASM+0x1c>
        LDR R2, [R1]
 444:	e5912000 	ldr	r2, [r1]
		TST R2, R0
 448:	e1120000 	tst	r2, r0
		MOVEQ R0, #0
 44c:	03a00000 	moveq	r0, #0
		MOVNE R0, #1
 450:	13a00001 	movne	r0, #1
        POP {R1, R2}
 454:	e8bd0006 	pop	{r1, r2}
        BX LR
 458:	e12fff1e 	bx	lr

0000045c <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
        PUSH {R1}
 45c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
        LDR R1, =PB_EDGE_CAP
 460:	e59f1078 	ldr	r1, [pc, #120]	; 4e0 <disable_PB_INT_ASM+0x20>
        LDR R0, [R1]
 464:	e5910000 	ldr	r0, [r1]
        POP {R1}
 468:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
        BX LR
 46c:	e12fff1e 	bx	lr

00000470 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
        PUSH {R1, R2}
 470:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_EDGE_CAP
 474:	e59f1064 	ldr	r1, [pc, #100]	; 4e0 <disable_PB_INT_ASM+0x20>
        LDR R2, [R1]
 478:	e5912000 	ldr	r2, [r1]
		TST R2, R0
 47c:	e1120000 	tst	r2, r0
		MOVEQ R0, #0
 480:	03a00000 	moveq	r0, #0
		MOVNE R0, #1
 484:	13a00001 	movne	r0, #1
        POP {R1, R2}
 488:	e8bd0006 	pop	{r1, r2}
        BX LR
 48c:	e12fff1e 	bx	lr

00000490 <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:
        PUSH {R1}
 490:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
        LDR R1, =PB_EDGE_CAP
 494:	e59f1044 	ldr	r1, [pc, #68]	; 4e0 <disable_PB_INT_ASM+0x20>
        STR R0, [R1]
 498:	e5810000 	str	r0, [r1]
        POP {R1}
 49c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
        BX LR
 4a0:	e12fff1e 	bx	lr

000004a4 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
        PUSH {R1, R2}
 4a4:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 4a8:	e59f1034 	ldr	r1, [pc, #52]	; 4e4 <disable_PB_INT_ASM+0x24>
        LDR R2, [R1]
 4ac:	e5912000 	ldr	r2, [r1]
        ORR R2, R2, R0
 4b0:	e1822000 	orr	r2, r2, r0
        STR R2, [R1]
 4b4:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 4b8:	e8bd0006 	pop	{r1, r2}
        BX LR
 4bc:	e12fff1e 	bx	lr

000004c0 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
        PUSH {R1, R2}
 4c0:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 4c4:	e59f1018 	ldr	r1, [pc, #24]	; 4e4 <disable_PB_INT_ASM+0x24>
        LDR R2, [R1]
 4c8:	e5912000 	ldr	r2, [r1]
        BIC R2, R2, R0
 4cc:	e1c22000 	bic	r2, r2, r0
        STR R2, [R1]
 4d0:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 4d4:	e8bd0006 	pop	{r1, r2}
        BX LR
 4d8:	e12fff1e 	bx	lr
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
        LDR R1, =PB_DATA
 4dc:	ff200050 	.word	0xff200050
        POP {R1, R2}
        BX LR

read_PB_edgecap_ASM:
        PUSH {R1}
        LDR R1, =PB_EDGE_CAP
 4e0:	ff20005c 	.word	0xff20005c
        POP {R1}
        BX LR

enable_PB_INT_ASM:
        PUSH {R1, R2}
        LDR R1, =PB_INTR_MSK
 4e4:	ff200058 	.word	0xff200058

000004e8 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
 4e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
 4ec:	e3a01000 	mov	r1, #0
	MOV R2, #1
 4f0:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
 4f4:	e5907000 	ldr	r7, [r0]
	B LOOP
 4f8:	eaffffff 	b	4fc <LOOP>

000004fc <LOOP>:

LOOP:
	TST R7, R2, LSL R1
 4fc:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
 500:	0a000000 	beq	508 <CONTINUE>
	BL CONFIG
 504:	eb000004 	bl	51c <CONFIG>

00000508 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
 508:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 50c:	e3510004 	cmp	r1, #4
	BLT LOOP
 510:	bafffff9 	blt	4fc <LOOP>

00000514 <DONE>:

DONE:
	POP {R4-R7, LR}
 514:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
 518:	e12fff1e 	bx	lr

0000051c <CONFIG>:


CONFIG:
	PUSH {LR}
 51c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
 520:	e59f3148 	ldr	r3, [pc, #328]	; 670 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
 524:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
 528:	eb000005 	bl	544 <DISABLE>
	BL SET_LOAD_VAL
 52c:	eb000008 	bl	554 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
 530:	eb00000e 	bl	570 <SET_LOAD_BIT>
	BL SET_INT_BIT
 534:	eb000013 	bl	588 <SET_INT_BIT>
	BL SET_EN_BIT
 538:	eb000019 	bl	5a4 <SET_EN_BIT>
	
	POP {LR}
 53c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
 540:	e12fff1e 	bx	lr

00000544 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
 544:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
 548:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
 54c:	e5845008 	str	r5, [r4, #8]
	BX LR
 550:	e12fff1e 	bx	lr

00000554 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
 554:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
 558:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
 55c:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
 560:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
 564:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
 568:	e5845000 	str	r5, [r4]
	BX LR
 56c:	e12fff1e 	bx	lr

00000570 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
 570:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
 574:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
 578:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
 57c:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
 580:	e5845008 	str	r5, [r4, #8]
	BX LR
 584:	e12fff1e 	bx	lr

00000588 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
 588:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
 58c:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
 590:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
 594:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
 598:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
 59c:	e5845008 	str	r5, [r4, #8]
	BX LR
 5a0:	e12fff1e 	bx	lr

000005a4 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
 5a4:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
 5a8:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
 5ac:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
 5b0:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
 5b4:	e5845008 	str	r5, [r4, #8]
	BX LR
 5b8:	e12fff1e 	bx	lr

000005bc <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
 5bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
 5c0:	e3a01000 	mov	r1, #0
	MOV R2, #1
 5c4:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
 5c8:	eaffffff 	b	5cc <CLEAR_INT_LOOP>

000005cc <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
 5cc:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
 5d0:	0a000000 	beq	5d8 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
 5d4:	eb000005 	bl	5f0 <CLEAR_INT>

000005d8 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
 5d8:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 5dc:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
 5e0:	bafffff9 	blt	5cc <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
 5e4:	eaffffff 	b	5e8 <CLEAR_INT_DONE>

000005e8 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
 5e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 5ec:	e12fff1e 	bx	lr

000005f0 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
 5f0:	e59f3078 	ldr	r3, [pc, #120]	; 670 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 5f4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
 5f8:	e593300c 	ldr	r3, [r3, #12]
	BX LR
 5fc:	e12fff1e 	bx	lr

00000600 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
 600:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
 604:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
 608:	e3a01000 	mov	r1, #0
	MOV R2, #1
 60c:	e3a02001 	mov	r2, #1
	MOV R4, #0
 610:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
 614:	eaffffff 	b	618 <READ_INT_LOOP>

00000618 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
 618:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
 61c:	0a000000 	beq	624 <READ_INT_CONTINUE>
	BL READ_INT
 620:	eb000008 	bl	648 <READ_INT>

00000624 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
 624:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 628:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
 62c:	0a000001 	beq	638 <READ_INT_DONE>
	LSL R4, R4, #1
 630:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
 634:	eafffff7 	b	618 <READ_INT_LOOP>

00000638 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
 638:	e1a00004 	mov	r0, r4
	POP {R4}
 63c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
 640:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 644:	e12fff1e 	bx	lr

00000648 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
 648:	e59f3020 	ldr	r3, [pc, #32]	; 670 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 64c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
 650:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
 654:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
 658:	e0244003 	eor	r4, r4, r3
	BX LR
 65c:	e12fff1e 	bx	lr

00000660 <HPS_TIM_BASE>:
 660:	ffc08000 	.word	0xffc08000
 664:	ffc09000 	.word	0xffc09000
 668:	ffd00000 	.word	0xffd00000
 66c:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
 670:	00000660 	.word	0x00000660

00000674 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
 674:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 678:	e28db000 	add	r11, sp, #0
 67c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
 680:	e3a030d3 	mov	r3, #211	; 0xd3
 684:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 688:	e51b3008 	ldr	r3, [r11, #-8]
 68c:	e129f003 	msr	CPSR_fc, r3
}
 690:	e28bd000 	add	sp, r11, #0
 694:	e8bd0800 	ldmfd	sp!, {r11}
 698:	e12fff1e 	bx	lr

0000069c <enable_A9_interrupts>:

void enable_A9_interrupts() {
 69c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 6a0:	e28db000 	add	r11, sp, #0
 6a4:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
 6a8:	e3a03053 	mov	r3, #83	; 0x53
 6ac:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 6b0:	e51b3008 	ldr	r3, [r11, #-8]
 6b4:	e129f003 	msr	CPSR_fc, r3
}
 6b8:	e28bd000 	add	sp, r11, #0
 6bc:	e8bd0800 	ldmfd	sp!, {r11}
 6c0:	e12fff1e 	bx	lr

000006c4 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
 6c4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 6c8:	e28db000 	add	r11, sp, #0
 6cc:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
 6d0:	e3e03007 	mvn	r3, #7
 6d4:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
 6d8:	e3a030d2 	mov	r3, #210	; 0xd2
 6dc:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 6e0:	e51b300c 	ldr	r3, [r11, #-12]
 6e4:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
 6e8:	e51b3008 	ldr	r3, [r11, #-8]
 6ec:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
 6f0:	e3a030d3 	mov	r3, #211	; 0xd3
 6f4:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 6f8:	e51b300c 	ldr	r3, [r11, #-12]
 6fc:	e129f003 	msr	CPSR_fc, r3
}
 700:	e28bd000 	add	sp, r11, #0
 704:	e8bd0800 	ldmfd	sp!, {r11}
 708:	e12fff1e 	bx	lr

0000070c <config_interrupt>:

void config_interrupt(int ID, int CPU) {
 70c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 710:	e28db000 	add	r11, sp, #0
 714:	e24dd01c 	sub	sp, sp, #28
 718:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
 71c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
 720:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 724:	e1a031c3 	asr	r3, r3, #3
 728:	e3c33003 	bic	r3, r3, #3
 72c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
 730:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 734:	e203301f 	and	r3, r3, #31
 738:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
 73c:	e3a02001 	mov	r2, #1
 740:	e51b300c 	ldr	r3, [r11, #-12]
 744:	e1a03312 	lsl	r3, r2, r3
 748:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
 74c:	e51b3008 	ldr	r3, [r11, #-8]
 750:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
 754:	e2433c03 	sub	r3, r3, #768	; 0x300
 758:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
 75c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 760:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 764:	e5921000 	ldr	r1, [r2]
 768:	e51b2010 	ldr	r2, [r11, #-16]
 76c:	e1812002 	orr	r2, r1, r2
 770:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
 774:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 778:	e3c33003 	bic	r3, r3, #3
 77c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
 780:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 784:	e2033003 	and	r3, r3, #3
 788:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
 78c:	e51b2008 	ldr	r2, [r11, #-8]
 790:	e51b300c 	ldr	r3, [r11, #-12]
 794:	e0823003 	add	r3, r2, r3
 798:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
 79c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
 7a0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 7a4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
 7a8:	e6ef2072 	uxtb	r2, r2
 7ac:	e5c32000 	strb	r2, [r3]
}
 7b0:	e28bd000 	add	sp, r11, #0
 7b4:	e8bd0800 	ldmfd	sp!, {r11}
 7b8:	e12fff1e 	bx	lr

000007bc <config_GIC>:

void config_GIC(int len, int* IDs) {
 7bc:	e92d4800 	push	{r11, lr}
 7c0:	e28db004 	add	r11, sp, #4
 7c4:	e24dd010 	sub	sp, sp, #16
 7c8:	e50b0010 	str	r0, [r11, #-16]
 7cc:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
 7d0:	e3a03000 	mov	r3, #0
 7d4:	e50b3008 	str	r3, [r11, #-8]
 7d8:	ea00000a 	b	808 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
 7dc:	e51b3008 	ldr	r3, [r11, #-8]
 7e0:	e1a03103 	lsl	r3, r3, #2
 7e4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 7e8:	e0823003 	add	r3, r2, r3
 7ec:	e5933000 	ldr	r3, [r3]
 7f0:	e1a00003 	mov	r0, r3
 7f4:	e3a01001 	mov	r1, #1
 7f8:	ebffffc3 	bl	70c <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
 7fc:	e51b3008 	ldr	r3, [r11, #-8]
 800:	e2833001 	add	r3, r3, #1
 804:	e50b3008 	str	r3, [r11, #-8]
 808:	e51b2008 	ldr	r2, [r11, #-8]
 80c:	e51b3010 	ldr	r3, [r11, #-16]
 810:	e1520003 	cmp	r2, r3
 814:	bafffff0 	blt	7dc <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
 818:	e30c3104 	movw	r3, #49412	; 0xc104
 81c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 820:	e30f2fff 	movw	r2, #65535	; 0xffff
 824:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
 828:	e3a03cc1 	mov	r3, #49408	; 0xc100
 82c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 830:	e3a02001 	mov	r2, #1
 834:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
 838:	e3a03a0d 	mov	r3, #53248	; 0xd000
 83c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 840:	e3a02001 	mov	r2, #1
 844:	e5832000 	str	r2, [r3]
}
 848:	e24bd004 	sub	sp, r11, #4
 84c:	e8bd8800 	pop	{r11, pc}

00000850 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
 850:	e24ee004 	sub	lr, lr, #4
 854:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
 858:	e28db018 	add	r11, sp, #24
 85c:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
 860:	e30c310c 	movw	r3, #49420	; 0xc10c
 864:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 868:	e5933000 	ldr	r3, [r3]
 86c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
 870:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 874:	e3530053 	cmp	r3, #83	; 0x53
 878:	0a00003d 	beq	974 <__cs3_isr_irq+0x124>
 87c:	e3530053 	cmp	r3, #83	; 0x53
 880:	ca000011 	bgt	8cc <__cs3_isr_irq+0x7c>
 884:	e353004e 	cmp	r3, #78	; 0x4e
 888:	0a000031 	beq	954 <__cs3_isr_irq+0x104>
 88c:	e353004e 	cmp	r3, #78	; 0x4e
 890:	ca000006 	bgt	8b0 <__cs3_isr_irq+0x60>
 894:	e3530048 	cmp	r3, #72	; 0x48
 898:	0a000029 	beq	944 <__cs3_isr_irq+0xf4>
 89c:	e3530049 	cmp	r3, #73	; 0x49
 8a0:	0a000029 	beq	94c <__cs3_isr_irq+0xfc>
 8a4:	e353001d 	cmp	r3, #29
 8a8:	0a000019 	beq	914 <__cs3_isr_irq+0xc4>
 8ac:	ea000036 	b	98c <__cs3_isr_irq+0x13c>
 8b0:	e3530050 	cmp	r3, #80	; 0x50
 8b4:	0a00002a 	beq	964 <__cs3_isr_irq+0x114>
 8b8:	e3530050 	cmp	r3, #80	; 0x50
 8bc:	ba000026 	blt	95c <__cs3_isr_irq+0x10c>
 8c0:	e3530051 	cmp	r3, #81	; 0x51
 8c4:	0a000028 	beq	96c <__cs3_isr_irq+0x11c>
 8c8:	ea00002f 	b	98c <__cs3_isr_irq+0x13c>
 8cc:	e35300c7 	cmp	r3, #199	; 0xc7
 8d0:	0a000013 	beq	924 <__cs3_isr_irq+0xd4>
 8d4:	e35300c7 	cmp	r3, #199	; 0xc7
 8d8:	ca000006 	bgt	8f8 <__cs3_isr_irq+0xa8>
 8dc:	e3530059 	cmp	r3, #89	; 0x59
 8e0:	0a000027 	beq	984 <__cs3_isr_irq+0x134>
 8e4:	e35300c5 	cmp	r3, #197	; 0xc5
 8e8:	0a00000b 	beq	91c <__cs3_isr_irq+0xcc>
 8ec:	e3530054 	cmp	r3, #84	; 0x54
 8f0:	0a000021 	beq	97c <__cs3_isr_irq+0x12c>
 8f4:	ea000024 	b	98c <__cs3_isr_irq+0x13c>
 8f8:	e35300c9 	cmp	r3, #201	; 0xc9
 8fc:	0a00000c 	beq	934 <__cs3_isr_irq+0xe4>
 900:	e35300c9 	cmp	r3, #201	; 0xc9
 904:	ba000008 	blt	92c <__cs3_isr_irq+0xdc>
 908:	e35300ca 	cmp	r3, #202	; 0xca
 90c:	0a00000a 	beq	93c <__cs3_isr_irq+0xec>
 910:	ea00001d 	b	98c <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
 914:	eb000051 	bl	a60 <A9_PRIV_TIM_ISR>
 918:	ea00001c 	b	990 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
 91c:	eb000050 	bl	a64 <HPS_GPIO1_ISR>
 920:	ea00001a 	b	990 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
 924:	eb00004f 	bl	a68 <HPS_TIM0_ISR>
 928:	ea000018 	b	990 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
 92c:	eb000055 	bl	a88 <HPS_TIM1_ISR>
 930:	ea000016 	b	990 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
 934:	eb000054 	bl	a8c <HPS_TIM2_ISR>
 938:	ea000014 	b	990 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
 93c:	eb000053 	bl	a90 <HPS_TIM3_ISR>
 940:	ea000012 	b	990 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
 944:	eb000052 	bl	a94 <FPGA_INTERVAL_TIM_ISR>
 948:	ea000010 	b	990 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
 94c:	eb000051 	bl	a98 <FPGA_PB_KEYS_ISR>
 950:	ea00000e 	b	990 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
 954:	eb000056 	bl	ab4 <FPGA_Audio_ISR>
 958:	ea00000c 	b	990 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
 95c:	eb000055 	bl	ab8 <FPGA_PS2_ISR>
 960:	ea00000a 	b	990 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
 964:	eb000054 	bl	abc <FPGA_JTAG_ISR>
 968:	ea000008 	b	990 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
 96c:	eb000053 	bl	ac0 <FPGA_IrDA_ISR>
 970:	ea000006 	b	990 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
 974:	eb000052 	bl	ac4 <FPGA_JP1_ISR>
 978:	ea000004 	b	990 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
 97c:	eb000051 	bl	ac8 <FPGA_JP2_ISR>
 980:	ea000002 	b	990 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
 984:	eb000050 	bl	acc <FPGA_PS2_DUAL_ISR>
 988:	ea000000 	b	990 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
 98c:	eafffffe 	b	98c <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
 990:	e30c3110 	movw	r3, #49424	; 0xc110
 994:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 998:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
 99c:	e5832000 	str	r2, [r3]
}
 9a0:	e24bd018 	sub	sp, r11, #24
 9a4:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000009a8 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
 9a8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 9ac:	e28db000 	add	r11, sp, #0
	while(1);
 9b0:	eafffffe 	b	9b0 <__cs3_reset+0x8>

000009b4 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
 9b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 9b8:	e28db000 	add	r11, sp, #0
	while(1);
 9bc:	eafffffe 	b	9bc <__cs3_isr_undef+0x8>

000009c0 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
 9c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 9c4:	e28db000 	add	r11, sp, #0
	while(1);
 9c8:	eafffffe 	b	9c8 <__cs3_isr_swi+0x8>

000009cc <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
 9cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 9d0:	e28db000 	add	r11, sp, #0
	while(1);
 9d4:	eafffffe 	b	9d4 <__cs3_isr_pabort+0x8>

000009d8 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
 9d8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 9dc:	e28db000 	add	r11, sp, #0
	while(1);
 9e0:	eafffffe 	b	9e0 <__cs3_isr_dabort+0x8>

000009e4 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
 9e4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 9e8:	e28db000 	add	r11, sp, #0
	while(1);
 9ec:	eafffffe 	b	9ec <__cs3_isr_fiq+0x8>

000009f0 <fix_bug>:
}

void fix_bug() {
 9f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 9f4:	e28db000 	add	r11, sp, #0
 9f8:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
 9fc:	e30d3198 	movw	r3, #53656	; 0xd198
 a00:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 a04:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
 a08:	e51b3008 	ldr	r3, [r11, #-8]
 a0c:	e3a02703 	mov	r2, #786432	; 0xc0000
 a10:	e5832000 	str	r2, [r3]
}
 a14:	e28bd000 	add	sp, r11, #0
 a18:	e8bd0800 	ldmfd	sp!, {r11}
 a1c:	e12fff1e 	bx	lr

00000a20 <int_setup>:

void int_setup(int len, int* IDs) {
 a20:	e92d4800 	push	{r11, lr}
 a24:	e28db004 	add	r11, sp, #4
 a28:	e24dd008 	sub	sp, sp, #8
 a2c:	e50b0008 	str	r0, [r11, #-8]
 a30:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
 a34:	ebffff0e 	bl	674 <disable_A9_interrupts>
	set_A9_IRQ_stack();
 a38:	ebffff21 	bl	6c4 <set_A9_IRQ_stack>
	fix_bug();
 a3c:	ebffffeb 	bl	9f0 <fix_bug>
	config_GIC(len, IDs);
 a40:	e51b0008 	ldr	r0, [r11, #-8]
 a44:	e51b100c 	ldr	r1, [r11, #-12]
 a48:	ebffff5b 	bl	7bc <config_GIC>
	enable_A9_interrupts();
 a4c:	ebffff12 	bl	69c <enable_A9_interrupts>
}
 a50:	e24bd004 	sub	sp, r11, #4
 a54:	e8bd8800 	pop	{r11, pc}

00000a58 <hps_tim0_int_flag>:
 a58:	00000000 	.word	0x00000000

00000a5c <pushbtn_int_flag>:
 a5c:	00000000 	.word	0x00000000

00000a60 <A9_PRIV_TIM_ISR>:

pushbtn_int_flag:   
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
 a60:	e12fff1e 	bx	lr

00000a64 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
 a64:	e12fff1e 	bx	lr

00000a68 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
    PUSH {LR}
 a68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    MOV R0, #0x1
 a6c:	e3a00001 	mov	r0, #1
    BL HPS_TIM_clear_INT_ASM
 a70:	ebfffed1 	bl	5bc <HPS_TIM_clear_INT_ASM>
    LDR R0, =hps_tim0_int_flag
 a74:	e59f0054 	ldr	r0, [pc, #84]	; ad0 <FPGA_PS2_DUAL_ISR+0x4>
    MOV R1, #1
 a78:	e3a01001 	mov	r1, #1
    STR R1, [R0]
 a7c:	e5801000 	str	r1, [r0]
    POP {LR}
 a80:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 a84:	e12fff1e 	bx	lr

00000a88 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
 a88:	e12fff1e 	bx	lr

00000a8c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
 a8c:	e12fff1e 	bx	lr

00000a90 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
 a90:	e12fff1e 	bx	lr

00000a94 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
 a94:	e12fff1e 	bx	lr

00000a98 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
    PUSH {R1, LR}
 a98:	e92d4002 	push	{r1, lr}
    BL read_PB_edgecap_ASM
 a9c:	ebfffe6e 	bl	45c <read_PB_edgecap_ASM>
    LDR R1, =pushbtn_int_flag
 aa0:	e59f102c 	ldr	r1, [pc, #44]	; ad4 <FPGA_PS2_DUAL_ISR+0x8>
    STR R0, [R1]
 aa4:	e5810000 	str	r0, [r1]
    BL PB_clear_edgecp_ASM
 aa8:	ebfffe78 	bl	490 <PB_clear_edgecp_ASM>
    POP {R1, LR}
 aac:	e8bd4002 	pop	{r1, lr}
    BX LR
 ab0:	e12fff1e 	bx	lr

00000ab4 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
 ab4:	e12fff1e 	bx	lr

00000ab8 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
 ab8:	e12fff1e 	bx	lr

00000abc <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
 abc:	e12fff1e 	bx	lr

00000ac0 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
 ac0:	e12fff1e 	bx	lr

00000ac4 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
 ac4:	e12fff1e 	bx	lr

00000ac8 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
 ac8:	e12fff1e 	bx	lr

00000acc <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
 acc:	e12fff1e 	bx	lr
	
HPS_TIM0_ISR:
    PUSH {LR}
    MOV R0, #0x1
    BL HPS_TIM_clear_INT_ASM
    LDR R0, =hps_tim0_int_flag
 ad0:	00000a58 	.word	0x00000a58
	BX LR
	
FPGA_PB_KEYS_ISR:
    PUSH {R1, LR}
    BL read_PB_edgecap_ASM
    LDR R1, =pushbtn_int_flag
 ad4:	00000a5c 	.word	0x00000a5c

00000ad8 <atexit>:
 ad8:	e1a01000 	mov	r1, r0
 adc:	e3a00000 	mov	r0, #0
 ae0:	e92d4008 	push	{r3, lr}
 ae4:	e1a02000 	mov	r2, r0
 ae8:	e1a03000 	mov	r3, r0
 aec:	eb00000e 	bl	b2c <__register_exitproc>
 af0:	e8bd4008 	pop	{r3, lr}
 af4:	e12fff1e 	bx	lr

00000af8 <exit>:
 af8:	e92d4008 	push	{r3, lr}
 afc:	e3a01000 	mov	r1, #0
 b00:	e1a04000 	mov	r4, r0
 b04:	eb000045 	bl	c20 <__call_exitprocs>
 b08:	e59f3018 	ldr	r3, [pc, #24]	; b28 <exit+0x30>
 b0c:	e5930000 	ldr	r0, [r3]
 b10:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 b14:	e3530000 	cmp	r3, #0
 b18:	11a0e00f 	movne	lr, pc
 b1c:	112fff13 	bxne	r3
 b20:	e1a00004 	mov	r0, r4
 b24:	eb0000c9 	bl	e50 <_exit>
 b28:	00000ef8 	.word	0x00000ef8

00000b2c <__register_exitproc>:
 b2c:	e59fc0e4 	ldr	r12, [pc, #228]	; c18 <__register_exitproc+0xec>
 b30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 b34:	e59c4000 	ldr	r4, [r12]
 b38:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 b3c:	e35c0000 	cmp	r12, #0
 b40:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 b44:	e59c5004 	ldr	r5, [r12, #4]
 b48:	0584c148 	streq	r12, [r4, #328]	; 0x148
 b4c:	e355001f 	cmp	r5, #31
 b50:	e24dd010 	sub	sp, sp, #16
 b54:	e1a06000 	mov	r6, r0
 b58:	da000015 	ble	bb4 <__register_exitproc+0x88>
 b5c:	e59f00b8 	ldr	r0, [pc, #184]	; c1c <__register_exitproc+0xf0>
 b60:	e3500000 	cmp	r0, #0
 b64:	1a000001 	bne	b70 <__register_exitproc+0x44>
 b68:	e3e00000 	mvn	r0, #0
 b6c:	ea000018 	b	bd4 <__register_exitproc+0xa8>
 b70:	e3a00e19 	mov	r0, #400	; 0x190
 b74:	e58d100c 	str	r1, [sp, #12]
 b78:	e58d2008 	str	r2, [sp, #8]
 b7c:	e58d3004 	str	r3, [sp, #4]
 b80:	e320f000 	nop	{0}
 b84:	e250c000 	subs	r12, r0, #0
 b88:	e59d100c 	ldr	r1, [sp, #12]
 b8c:	e59d2008 	ldr	r2, [sp, #8]
 b90:	e59d3004 	ldr	r3, [sp, #4]
 b94:	0afffff3 	beq	b68 <__register_exitproc+0x3c>
 b98:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 b9c:	e3a00000 	mov	r0, #0
 ba0:	e58c0004 	str	r0, [r12, #4]
 ba4:	e58c5000 	str	r5, [r12]
 ba8:	e584c148 	str	r12, [r4, #328]	; 0x148
 bac:	e58c0188 	str	r0, [r12, #392]	; 0x188
 bb0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 bb4:	e3560000 	cmp	r6, #0
 bb8:	e59c4004 	ldr	r4, [r12, #4]
 bbc:	1a000007 	bne	be0 <__register_exitproc+0xb4>
 bc0:	e2843002 	add	r3, r4, #2
 bc4:	e2844001 	add	r4, r4, #1
 bc8:	e78c1103 	str	r1, [r12, r3, lsl #2]
 bcc:	e58c4004 	str	r4, [r12, #4]
 bd0:	e3a00000 	mov	r0, #0
 bd4:	e28dd010 	add	sp, sp, #16
 bd8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 bdc:	e12fff1e 	bx	lr
 be0:	e3a00001 	mov	r0, #1
 be4:	e1a00410 	lsl	r0, r0, r4
 be8:	e08c8104 	add	r8, r12, r4, lsl #2
 bec:	e3560002 	cmp	r6, #2
 bf0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 bf4:	e5883108 	str	r3, [r8, #264]	; 0x108
 bf8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 bfc:	e1877000 	orr	r7, r7, r0
 c00:	01830000 	orreq	r0, r3, r0
 c04:	e1a05008 	mov	r5, r8
 c08:	e5882088 	str	r2, [r8, #136]	; 0x88
 c0c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 c10:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 c14:	eaffffe9 	b	bc0 <__register_exitproc+0x94>
 c18:	00000ef8 	.word	0x00000ef8
 c1c:	00000000 	.word	0x00000000

00000c20 <__call_exitprocs>:
 c20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c24:	e59f3168 	ldr	r3, [pc, #360]	; d94 <__call_exitprocs+0x174>
 c28:	e5933000 	ldr	r3, [r3]
 c2c:	e24dd014 	sub	sp, sp, #20
 c30:	e58d3004 	str	r3, [sp, #4]
 c34:	e2833f52 	add	r3, r3, #328	; 0x148
 c38:	e58d0008 	str	r0, [sp, #8]
 c3c:	e58d300c 	str	r3, [sp, #12]
 c40:	e1a07001 	mov	r7, r1
 c44:	e3a08001 	mov	r8, #1
 c48:	e59d3004 	ldr	r3, [sp, #4]
 c4c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 c50:	e3560000 	cmp	r6, #0
 c54:	e59db00c 	ldr	r11, [sp, #12]
 c58:	0a000033 	beq	d2c <__call_exitprocs+0x10c>
 c5c:	e5965004 	ldr	r5, [r6, #4]
 c60:	e2554001 	subs	r4, r5, #1
 c64:	5286a088 	addpl	r10, r6, #136	; 0x88
 c68:	5285501f 	addpl	r5, r5, #31
 c6c:	508a5105 	addpl	r5, r10, r5, lsl #2
 c70:	5a000007 	bpl	c94 <__call_exitprocs+0x74>
 c74:	ea000029 	b	d20 <__call_exitprocs+0x100>
 c78:	e5953000 	ldr	r3, [r5]
 c7c:	e1530007 	cmp	r3, r7
 c80:	0a000005 	beq	c9c <__call_exitprocs+0x7c>
 c84:	e2444001 	sub	r4, r4, #1
 c88:	e3740001 	cmn	r4, #1
 c8c:	e2455004 	sub	r5, r5, #4
 c90:	0a000022 	beq	d20 <__call_exitprocs+0x100>
 c94:	e3570000 	cmp	r7, #0
 c98:	1afffff6 	bne	c78 <__call_exitprocs+0x58>
 c9c:	e5963004 	ldr	r3, [r6, #4]
 ca0:	e06a2005 	rsb	r2, r10, r5
 ca4:	e2433001 	sub	r3, r3, #1
 ca8:	e0862002 	add	r2, r6, r2
 cac:	e1530004 	cmp	r3, r4
 cb0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 cb4:	13a01000 	movne	r1, #0
 cb8:	05864004 	streq	r4, [r6, #4]
 cbc:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 cc0:	e3530000 	cmp	r3, #0
 cc4:	0affffee 	beq	c84 <__call_exitprocs+0x64>
 cc8:	e1a02418 	lsl	r2, r8, r4
 ccc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 cd0:	e1120001 	tst	r2, r1
 cd4:	e5969004 	ldr	r9, [r6, #4]
 cd8:	0a000016 	beq	d38 <__call_exitprocs+0x118>
 cdc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 ce0:	e1120001 	tst	r2, r1
 ce4:	1a000016 	bne	d44 <__call_exitprocs+0x124>
 ce8:	e59d0008 	ldr	r0, [sp, #8]
 cec:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 cf0:	e1a0e00f 	mov	lr, pc
 cf4:	e12fff13 	bx	r3
 cf8:	e5963004 	ldr	r3, [r6, #4]
 cfc:	e1530009 	cmp	r3, r9
 d00:	1affffd0 	bne	c48 <__call_exitprocs+0x28>
 d04:	e59b3000 	ldr	r3, [r11]
 d08:	e1530006 	cmp	r3, r6
 d0c:	1affffcd 	bne	c48 <__call_exitprocs+0x28>
 d10:	e2444001 	sub	r4, r4, #1
 d14:	e3740001 	cmn	r4, #1
 d18:	e2455004 	sub	r5, r5, #4
 d1c:	1affffdc 	bne	c94 <__call_exitprocs+0x74>
 d20:	e59f1070 	ldr	r1, [pc, #112]	; d98 <__call_exitprocs+0x178>
 d24:	e3510000 	cmp	r1, #0
 d28:	1a000009 	bne	d54 <__call_exitprocs+0x134>
 d2c:	e28dd014 	add	sp, sp, #20
 d30:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 d34:	e12fff1e 	bx	lr
 d38:	e1a0e00f 	mov	lr, pc
 d3c:	e12fff13 	bx	r3
 d40:	eaffffec 	b	cf8 <__call_exitprocs+0xd8>
 d44:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 d48:	e1a0e00f 	mov	lr, pc
 d4c:	e12fff13 	bx	r3
 d50:	eaffffe8 	b	cf8 <__call_exitprocs+0xd8>
 d54:	e5963004 	ldr	r3, [r6, #4]
 d58:	e3530000 	cmp	r3, #0
 d5c:	e5963000 	ldr	r3, [r6]
 d60:	1a000008 	bne	d88 <__call_exitprocs+0x168>
 d64:	e3530000 	cmp	r3, #0
 d68:	0a000006 	beq	d88 <__call_exitprocs+0x168>
 d6c:	e1a00006 	mov	r0, r6
 d70:	e58b3000 	str	r3, [r11]
 d74:	e320f000 	nop	{0}
 d78:	e59b6000 	ldr	r6, [r11]
 d7c:	e3560000 	cmp	r6, #0
 d80:	1affffb5 	bne	c5c <__call_exitprocs+0x3c>
 d84:	eaffffe8 	b	d2c <__call_exitprocs+0x10c>
 d88:	e1a0b006 	mov	r11, r6
 d8c:	e1a06003 	mov	r6, r3
 d90:	eafffff9 	b	d7c <__call_exitprocs+0x15c>
 d94:	00000ef8 	.word	0x00000ef8
 d98:	00000000 	.word	0x00000000

00000d9c <register_fini>:
 d9c:	e92d4008 	push	{r3, lr}
 da0:	e59f3010 	ldr	r3, [pc, #16]	; db8 <register_fini+0x1c>
 da4:	e3530000 	cmp	r3, #0
 da8:	159f000c 	ldrne	r0, [pc, #12]	; dbc <register_fini+0x20>
 dac:	1bffff49 	blne	ad8 <atexit>
 db0:	e8bd4008 	pop	{r3, lr}
 db4:	e12fff1e 	bx	lr
 db8:	00000f20 	.word	0x00000f20
 dbc:	00000dc0 	.word	0x00000dc0

00000dc0 <__libc_fini_array>:
 dc0:	e92d4038 	push	{r3, r4, r5, lr}
 dc4:	e59f5030 	ldr	r5, [pc, #48]	; dfc <__libc_fini_array+0x3c>
 dc8:	e59f4030 	ldr	r4, [pc, #48]	; e00 <__libc_fini_array+0x40>
 dcc:	e0654004 	rsb	r4, r5, r4
 dd0:	e1b04144 	asrs	r4, r4, #2
 dd4:	10855104 	addne	r5, r5, r4, lsl #2
 dd8:	0a000004 	beq	df0 <__libc_fini_array+0x30>
 ddc:	e5353004 	ldr	r3, [r5, #-4]!
 de0:	e1a0e00f 	mov	lr, pc
 de4:	e12fff13 	bx	r3
 de8:	e2544001 	subs	r4, r4, #1
 dec:	1afffffa 	bne	ddc <__libc_fini_array+0x1c>
 df0:	eb00004a 	bl	f20 <__libc_fini>
 df4:	e8bd4038 	pop	{r3, r4, r5, lr}
 df8:	e12fff1e 	bx	lr
 dfc:	00000f38 	.word	0x00000f38
 e00:	00000f3c 	.word	0x00000f3c

00000e04 <__cs3_premain>:
 e04:	e92d4008 	push	{r3, lr}
 e08:	eb000017 	bl	e6c <__libc_init_array>
 e0c:	e59f3030 	ldr	r3, [pc, #48]	; e44 <__cs3_premain+0x40>
 e10:	e3530000 	cmp	r3, #0
 e14:	15930000 	ldrne	r0, [r3]
 e18:	01a00003 	moveq	r0, r3
 e1c:	e59f3024 	ldr	r3, [pc, #36]	; e48 <__cs3_premain+0x44>
 e20:	e3530000 	cmp	r3, #0
 e24:	15931000 	ldrne	r1, [r3]
 e28:	01a01003 	moveq	r1, r3
 e2c:	e3a02000 	mov	r2, #0
 e30:	ebfffd2b 	bl	2e4 <main>
 e34:	e59f3010 	ldr	r3, [pc, #16]	; e4c <__cs3_premain+0x48>
 e38:	e3530000 	cmp	r3, #0
 e3c:	1bffff2d 	blne	af8 <exit>
 e40:	eafffffe 	b	e40 <__cs3_premain+0x3c>
	...
 e4c:	00000af8 	.word	0x00000af8

00000e50 <_exit>:
 e50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 e54:	e3a00018 	mov	r0, #24
 e58:	e59f1004 	ldr	r1, [pc, #4]	; e64 <_exit+0x14>
 e5c:	ef123456 	svc	0x00123456
 e60:	eafffffe 	b	e60 <_exit+0x10>
 e64:	00020026 	.word	0x00020026

00000e68 <__cs3_isr_interrupt>:
 e68:	eafffffe 	b	e68 <__cs3_isr_interrupt>

00000e6c <__libc_init_array>:
 e6c:	e92d4070 	push	{r4, r5, r6, lr}
 e70:	e59f506c 	ldr	r5, [pc, #108]	; ee4 <__libc_init_array+0x78>
 e74:	e59f606c 	ldr	r6, [pc, #108]	; ee8 <__libc_init_array+0x7c>
 e78:	e0656006 	rsb	r6, r5, r6
 e7c:	e1b06146 	asrs	r6, r6, #2
 e80:	12455004 	subne	r5, r5, #4
 e84:	13a04000 	movne	r4, #0
 e88:	0a000005 	beq	ea4 <__libc_init_array+0x38>
 e8c:	e5b53004 	ldr	r3, [r5, #4]!
 e90:	e2844001 	add	r4, r4, #1
 e94:	e1a0e00f 	mov	lr, pc
 e98:	e12fff13 	bx	r3
 e9c:	e1560004 	cmp	r6, r4
 ea0:	1afffff9 	bne	e8c <__libc_init_array+0x20>
 ea4:	e59f5040 	ldr	r5, [pc, #64]	; eec <__libc_init_array+0x80>
 ea8:	e59f6040 	ldr	r6, [pc, #64]	; ef0 <__libc_init_array+0x84>
 eac:	e0656006 	rsb	r6, r5, r6
 eb0:	eb000012 	bl	f00 <_init>
 eb4:	e1b06146 	asrs	r6, r6, #2
 eb8:	12455004 	subne	r5, r5, #4
 ebc:	13a04000 	movne	r4, #0
 ec0:	0a000005 	beq	edc <__libc_init_array+0x70>
 ec4:	e5b53004 	ldr	r3, [r5, #4]!
 ec8:	e2844001 	add	r4, r4, #1
 ecc:	e1a0e00f 	mov	lr, pc
 ed0:	e12fff13 	bx	r3
 ed4:	e1560004 	cmp	r6, r4
 ed8:	1afffff9 	bne	ec4 <__libc_init_array+0x58>
 edc:	e8bd4070 	pop	{r4, r5, r6, lr}
 ee0:	e12fff1e 	bx	lr
 ee4:	00000f18 	.word	0x00000f18
 ee8:	00000f18 	.word	0x00000f18
 eec:	00000f18 	.word	0x00000f18
 ef0:	00000f20 	.word	0x00000f20

Disassembly of section .rodata:

00000ef8 <_global_impure_ptr>:
 ef8:	00000f60 00000043                       `...C...

00000f00 <_init>:
 f00:	e1a0c00d 	mov	r12, sp
 f04:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 f08:	e24cb004 	sub	r11, r12, #4
 f0c:	e24bd028 	sub	sp, r11, #40	; 0x28
 f10:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 f14:	e12fff1e 	bx	lr

00000f18 <__init_array_start>:
 f18:	00000d9c 	.word	0x00000d9c

00000f1c <__frame_dummy_init_array_entry>:
 f1c:	00000208                                ....

00000f20 <__libc_fini>:
 f20:	e1a0c00d 	mov	r12, sp
 f24:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 f28:	e24cb004 	sub	r11, r12, #4
 f2c:	e24bd028 	sub	sp, r11, #40	; 0x28
 f30:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 f34:	e12fff1e 	bx	lr

00000f38 <__fini_array_start>:
 f38:	000001c4 	.word	0x000001c4

00000f3c <__cs3_regions>:
 f3c:	00000000 	.word	0x00000000
 f40:	00000040 	.word	0x00000040
 f44:	00000040 	.word	0x00000040
 f48:	00001350 	.word	0x00001350
 f4c:	00000020 	.word	0x00000020
