
P:/comp_org_lab/Lab4/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 bc 0b 00 00 c0 0b 00 00 c4 0b 00 00     @...............
  30:	c8 0b 00 00 b8 0b 00 00 cc 0b 00 00 d0 0b 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00029e 	bl	b54 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000cb8 	.word	0x00000cb8

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000010f0 	.word	0x000010f0

00000124 <__cs3_heap_start_ptr>:
 124:	00001118 	.word	0x00001118

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000010f8 	.word	0x000010f8
 170:	000010fb 	.word	0x000010fb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000010f8 	.word	0x000010f8
 1bc:	000010f8 	.word	0x000010f8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000010f8 	.word	0x000010f8
 200:	00000000 	.word	0x00000000
 204:	00000c5c 	.word	0x00000c5c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000c5c 	.word	0x00000c5c
 250:	000010fc 	.word	0x000010fc
 254:	00000cb8 	.word	0x00000cb8
 258:	00000000 	.word	0x00000000

0000025c <part2>:
#include	<stdio.h>
#include	"./drivers/inc/VGA.h"
#include	"./drivers/inc/pushbuttons.h"
#include	"./drivers/inc/slider_switches.h"

int	part2(){
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int	x = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e50b3008 	str	r3, [r11, #-8]
	int y = 0;
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
	char read;
	VGA_clear_charbuff_ASM();
 278:	eb000104 	bl	690 <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
 27c:	eb000112 	bl	6cc <VGA_clear_pixelbuff_ASM>
 280:	ea000000 	b	288 <part2+0x2c>
				y%=60;
			}
			x+=3;
			x%=81;
		}
	}
 284:	e1a00000 	nop			; (mov r0, r0)
	int y = 0;
	char read;
	VGA_clear_charbuff_ASM();
	VGA_clear_pixelbuff_ASM();
	while(1){
		if	(read_PS2_data_ASM(&read)){
 288:	e24b300d 	sub	r3, r11, #13
 28c:	e1a00003 	mov	r0, r3
 290:	eb000158 	bl	7f8 <read_PS2_data_ASM>
 294:	e1a03000 	mov	r3, r0
 298:	e3530000 	cmp	r3, #0
 29c:	0afffff8 	beq	284 <part2+0x28>
			VGA_write_byte_ASM(x, y, read);
 2a0:	e55b300d 	ldrb	r3, [r11, #-13]
 2a4:	e51b0008 	ldr	r0, [r11, #-8]
 2a8:	e51b100c 	ldr	r1, [r11, #-12]
 2ac:	e1a02003 	mov	r2, r3
 2b0:	eb0000c5 	bl	5cc <VGA_write_byte_ASM>
			if (x == 78){
 2b4:	e51b3008 	ldr	r3, [r11, #-8]
 2b8:	e353004e 	cmp	r3, #78	; 0x4e
 2bc:	1a000010 	bne	304 <part2+0xa8>
				y+=1;
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e2833001 	add	r3, r3, #1
 2c8:	e50b300c 	str	r3, [r11, #-12]
				y%=60;
 2cc:	e51b200c 	ldr	r2, [r11, #-12]
 2d0:	e3083889 	movw	r3, #34953	; 0x8889
 2d4:	e3483888 	movt	r3, #34952	; 0x8888
 2d8:	e0c31293 	smull	r1, r3, r3, r2
 2dc:	e0833002 	add	r3, r3, r2
 2e0:	e1a012c3 	asr	r1, r3, #5
 2e4:	e1a03fc2 	asr	r3, r2, #31
 2e8:	e0631001 	rsb	r1, r3, r1
 2ec:	e1a03001 	mov	r3, r1
 2f0:	e1a03203 	lsl	r3, r3, #4
 2f4:	e0613003 	rsb	r3, r1, r3
 2f8:	e1a03103 	lsl	r3, r3, #2
 2fc:	e0633002 	rsb	r3, r3, r2
 300:	e50b300c 	str	r3, [r11, #-12]
			}
			x+=3;
 304:	e51b3008 	ldr	r3, [r11, #-8]
 308:	e2833003 	add	r3, r3, #3
 30c:	e50b3008 	str	r3, [r11, #-8]
			x%=81;
 310:	e51b2008 	ldr	r2, [r11, #-8]
 314:	e30b30fd 	movw	r3, #45309	; 0xb0fd
 318:	e3413948 	movt	r3, #6472	; 0x1948
 31c:	e0c31293 	smull	r1, r3, r3, r2
 320:	e1a011c3 	asr	r1, r3, #3
 324:	e1a03fc2 	asr	r3, r2, #31
 328:	e0631001 	rsb	r1, r3, r1
 32c:	e1a03001 	mov	r3, r1
 330:	e1a03183 	lsl	r3, r3, #3
 334:	e0833001 	add	r3, r3, r1
 338:	e1a01183 	lsl	r1, r3, #3
 33c:	e0833001 	add	r3, r3, r1
 340:	e0633002 	rsb	r3, r3, r2
 344:	e50b3008 	str	r3, [r11, #-8]
		}
	}
 348:	eaffffcd 	b	284 <part2+0x28>

0000034c <test_char>:
	return	0;
}

void test_char(){
 34c:	e92d4800 	push	{r11, lr}
 350:	e28db004 	add	r11, sp, #4
 354:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 358:	e3a03000 	mov	r3, #0
 35c:	e54b300d 	strb	r3, [r11, #-13]
	for	(y=0; y<=59; y++)
 360:	e3a03000 	mov	r3, #0
 364:	e50b300c 	str	r3, [r11, #-12]
 368:	ea000013 	b	3bc <test_char+0x70>
		for	(x=0; x<=79; x++)
 36c:	e3a03000 	mov	r3, #0
 370:	e50b3008 	str	r3, [r11, #-8]
 374:	ea00000a 	b	3a4 <test_char+0x58>
			VGA_write_char_ASM(x, y, c++);
 378:	e55b300d 	ldrb	r3, [r11, #-13]
 37c:	e55b200d 	ldrb	r2, [r11, #-13]
 380:	e2822001 	add	r2, r2, #1
 384:	e54b200d 	strb	r2, [r11, #-13]
 388:	e51b0008 	ldr	r0, [r11, #-8]
 38c:	e51b100c 	ldr	r1, [r11, #-12]
 390:	e1a02003 	mov	r2, r3
 394:	eb0000ae 	bl	654 <VGA_write_char_ASM>

void test_char(){
	int x, y;
	char c = 0;
	for	(y=0; y<=59; y++)
		for	(x=0; x<=79; x++)
 398:	e51b3008 	ldr	r3, [r11, #-8]
 39c:	e2833001 	add	r3, r3, #1
 3a0:	e50b3008 	str	r3, [r11, #-8]
 3a4:	e51b3008 	ldr	r3, [r11, #-8]
 3a8:	e353004f 	cmp	r3, #79	; 0x4f
 3ac:	dafffff1 	ble	378 <test_char+0x2c>
}

void test_char(){
	int x, y;
	char c = 0;
	for	(y=0; y<=59; y++)
 3b0:	e51b300c 	ldr	r3, [r11, #-12]
 3b4:	e2833001 	add	r3, r3, #1
 3b8:	e50b300c 	str	r3, [r11, #-12]
 3bc:	e51b300c 	ldr	r3, [r11, #-12]
 3c0:	e353003b 	cmp	r3, #59	; 0x3b
 3c4:	daffffe8 	ble	36c <test_char+0x20>
		for	(x=0; x<=79; x++)
			VGA_write_char_ASM(x, y, c++);
}
 3c8:	e24bd004 	sub	sp, r11, #4
 3cc:	e8bd8800 	pop	{r11, pc}

000003d0 <test_byte>:

void test_byte(){
 3d0:	e92d4800 	push	{r11, lr}
 3d4:	e28db004 	add	r11, sp, #4
 3d8:	e24dd010 	sub	sp, sp, #16
	int x, y;
	char c = 0;
 3dc:	e3a03000 	mov	r3, #0
 3e0:	e54b300d 	strb	r3, [r11, #-13]
	for	(y=0; y<=59; y++)
 3e4:	e3a03000 	mov	r3, #0
 3e8:	e50b300c 	str	r3, [r11, #-12]
 3ec:	ea000013 	b	440 <test_byte+0x70>
		for	(x=0; x<=79; x+=3)
 3f0:	e3a03000 	mov	r3, #0
 3f4:	e50b3008 	str	r3, [r11, #-8]
 3f8:	ea00000a 	b	428 <test_byte+0x58>
			VGA_write_byte_ASM(x, y, c++);
 3fc:	e55b300d 	ldrb	r3, [r11, #-13]
 400:	e55b200d 	ldrb	r2, [r11, #-13]
 404:	e2822001 	add	r2, r2, #1
 408:	e54b200d 	strb	r2, [r11, #-13]
 40c:	e51b0008 	ldr	r0, [r11, #-8]
 410:	e51b100c 	ldr	r1, [r11, #-12]
 414:	e1a02003 	mov	r2, r3
 418:	eb00006b 	bl	5cc <VGA_write_byte_ASM>

void test_byte(){
	int x, y;
	char c = 0;
	for	(y=0; y<=59; y++)
		for	(x=0; x<=79; x+=3)
 41c:	e51b3008 	ldr	r3, [r11, #-8]
 420:	e2833003 	add	r3, r3, #3
 424:	e50b3008 	str	r3, [r11, #-8]
 428:	e51b3008 	ldr	r3, [r11, #-8]
 42c:	e353004f 	cmp	r3, #79	; 0x4f
 430:	dafffff1 	ble	3fc <test_byte+0x2c>
}

void test_byte(){
	int x, y;
	char c = 0;
	for	(y=0; y<=59; y++)
 434:	e51b300c 	ldr	r3, [r11, #-12]
 438:	e2833001 	add	r3, r3, #1
 43c:	e50b300c 	str	r3, [r11, #-12]
 440:	e51b300c 	ldr	r3, [r11, #-12]
 444:	e353003b 	cmp	r3, #59	; 0x3b
 448:	daffffe8 	ble	3f0 <test_byte+0x20>
		for	(x=0; x<=79; x+=3)
			VGA_write_byte_ASM(x, y, c++);
}
 44c:	e24bd004 	sub	sp, r11, #4
 450:	e8bd8800 	pop	{r11, pc}

00000454 <test_pixel>:

void test_pixel(){
 454:	e92d4800 	push	{r11, lr}
 458:	e28db004 	add	r11, sp, #4
 45c:	e24dd010 	sub	sp, sp, #16
	int x, y;
	unsigned short colour = 0;
 460:	e3a03000 	mov	r3, #0
 464:	e14b30be 	strh	r3, [r11, #-14]
	for	(y=0; y<=239; y++)
 468:	e3a03000 	mov	r3, #0
 46c:	e50b300c 	str	r3, [r11, #-12]
 470:	ea000015 	b	4cc <test_pixel+0x78>
		for	(x=0; x<=319; x++)
 474:	e3a03000 	mov	r3, #0
 478:	e50b3008 	str	r3, [r11, #-8]
 47c:	ea00000b 	b	4b0 <test_pixel+0x5c>
			VGA_draw_point_ASM(x, y, colour++);
 480:	e15b30be 	ldrh	r3, [r11, #-14]
 484:	e15b20be 	ldrh	r2, [r11, #-14]
 488:	e2822001 	add	r2, r2, #1
 48c:	e14b20be 	strh	r2, [r11, #-14]
 490:	e6bf3073 	sxth	r3, r3
 494:	e51b0008 	ldr	r0, [r11, #-8]
 498:	e51b100c 	ldr	r1, [r11, #-12]
 49c:	e1a02003 	mov	r2, r3
 4a0:	eb000038 	bl	588 <VGA_draw_point_ASM>

void test_pixel(){
	int x, y;
	unsigned short colour = 0;
	for	(y=0; y<=239; y++)
		for	(x=0; x<=319; x++)
 4a4:	e51b3008 	ldr	r3, [r11, #-8]
 4a8:	e2833001 	add	r3, r3, #1
 4ac:	e50b3008 	str	r3, [r11, #-8]
 4b0:	e51b2008 	ldr	r2, [r11, #-8]
 4b4:	e300313f 	movw	r3, #319	; 0x13f
 4b8:	e1520003 	cmp	r2, r3
 4bc:	daffffef 	ble	480 <test_pixel+0x2c>
}

void test_pixel(){
	int x, y;
	unsigned short colour = 0;
	for	(y=0; y<=239; y++)
 4c0:	e51b300c 	ldr	r3, [r11, #-12]
 4c4:	e2833001 	add	r3, r3, #1
 4c8:	e50b300c 	str	r3, [r11, #-12]
 4cc:	e51b300c 	ldr	r3, [r11, #-12]
 4d0:	e35300ef 	cmp	r3, #239	; 0xef
 4d4:	daffffe6 	ble	474 <test_pixel+0x20>
		for	(x=0; x<=319; x++)
			VGA_draw_point_ASM(x, y, colour++);
}
 4d8:	e24bd004 	sub	sp, r11, #4
 4dc:	e8bd8800 	pop	{r11, pc}

000004e0 <part1>:

int	part1(){
 4e0:	e92d4800 	push	{r11, lr}
 4e4:	e28db004 	add	r11, sp, #4
 4e8:	e24dd008 	sub	sp, sp, #8
	VGA_clear_charbuff_ASM();
 4ec:	eb000067 	bl	690 <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
 4f0:	eb000075 	bl	6cc <VGA_clear_pixelbuff_ASM>
 4f4:	ea000000 	b	4fc <part1+0x1c>
			VGA_clear_charbuff_ASM();
		}
		if	(btn & PB3){
			VGA_clear_pixelbuff_ASM();
		}
	}
 4f8:	e1a00000 	nop			; (mov r0, r0)
int	part1(){
	VGA_clear_charbuff_ASM();
	VGA_clear_pixelbuff_ASM();
	
	while(1){
		int btn = read_PB_data_ASM();
 4fc:	eb000087 	bl	720 <read_PB_data_ASM>
 500:	e50b0008 	str	r0, [r11, #-8]
		if	(btn & PB0){
 504:	e51b3008 	ldr	r3, [r11, #-8]
 508:	e2033001 	and	r3, r3, #1
 50c:	e3530000 	cmp	r3, #0
 510:	0a000006 	beq	530 <part1+0x50>
			if (read_slider_switches_ASM() != 0){
 514:	eb0000b1 	bl	7e0 <read_slider_switches_ASM>
 518:	e1a03000 	mov	r3, r0
 51c:	e3530000 	cmp	r3, #0
 520:	0a000001 	beq	52c <part1+0x4c>
				test_byte();
 524:	ebffffa9 	bl	3d0 <test_byte>
 528:	ea000000 	b	530 <part1+0x50>
			} else {
				test_char();
 52c:	ebffff86 	bl	34c <test_char>
			}
		}
		if	(btn & PB1){
 530:	e51b3008 	ldr	r3, [r11, #-8]
 534:	e2033002 	and	r3, r3, #2
 538:	e3530000 	cmp	r3, #0
 53c:	0a000000 	beq	544 <part1+0x64>
			test_pixel();
 540:	ebffffc3 	bl	454 <test_pixel>
		}
		if	(btn & PB2){
 544:	e51b3008 	ldr	r3, [r11, #-8]
 548:	e2033004 	and	r3, r3, #4
 54c:	e3530000 	cmp	r3, #0
 550:	0a000000 	beq	558 <part1+0x78>
			VGA_clear_charbuff_ASM();
 554:	eb00004d 	bl	690 <VGA_clear_charbuff_ASM>
		}
		if	(btn & PB3){
 558:	e51b3008 	ldr	r3, [r11, #-8]
 55c:	e2033008 	and	r3, r3, #8
 560:	e3530000 	cmp	r3, #0
 564:	0affffe3 	beq	4f8 <part1+0x18>
			VGA_clear_pixelbuff_ASM();
 568:	eb000057 	bl	6cc <VGA_clear_pixelbuff_ASM>
		}
	}
 56c:	eaffffe1 	b	4f8 <part1+0x18>

00000570 <main>:

	return	0;
}

int	main(){
 570:	e92d4800 	push	{r11, lr}
 574:	e28db004 	add	r11, sp, #4

	/* VGA application */
	//return part1();
	
	/* Keyboard */
	return part2();
 578:	ebffff37 	bl	25c <part2>
 57c:	e1a03000 	mov	r3, r0
}
 580:	e1a00003 	mov	r0, r3
 584:	e8bd8800 	pop	{r11, pc}

00000588 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
		//R0 for x
		//R1 for y
		//R2 for color in short
		PUSH 	{R3-R6}
 588:	e92d0078 	push	{r3, r4, r5, r6}
		MOVW	R6,		#319
 58c:	e300613f 	movw	r6, #319	; 0x13f
		CMP		R0,		#0
 590:	e3500000 	cmp	r0, #0
		BLT		BYE
 594:	ba00003c 	blt	68c <BYE>
		CMP		R0,		R6
 598:	e1500006 	cmp	r0, r6
		BGT		BYE
 59c:	ca00003a 	bgt	68c <BYE>
		CMP		R1,		#0
 5a0:	e3510000 	cmp	r1, #0
		BLT		BYE
 5a4:	ba000038 	blt	68c <BYE>
		CMP		R1,		#239
 5a8:	e35100ef 	cmp	r1, #239	; 0xef
		BGT		BYE
 5ac:	ca000036 	bgt	68c <BYE>
		LDR		R3,		=PIX_BUFF
 5b0:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
		ADD		R4,		R0,		R1,		LSL		#9
 5b4:	e0804481 	add	r4, r0, r1, lsl #9
		ADD		R5,		R3,		R4,		LSL		#1
 5b8:	e0835084 	add	r5, r3, r4, lsl #1
		STRH 	R2, 	[R5]
 5bc:	e1c520b0 	strh	r2, [r5]
		POP 	{R3-R6}
 5c0:	e8bd0078 	pop	{r3, r4, r5, r6}
		B		BYE
 5c4:	ea000030 	b	68c <BYE>

000005c8 <CHR_BUFF_SNT_CHK>:

CHR_BUFF_SNT_CHK:
		BX		LR		
 5c8:	e12fff1e 	bx	lr

000005cc <VGA_write_byte_ASM>:

VGA_write_byte_ASM:
		//R0 for x
		//R1 for y
		//R2 for char
		PUSH	{R3-R7}
 5cc:	e92d00f8 	push	{r3, r4, r5, r6, r7}
		CMP		R0,		#0
 5d0:	e3500000 	cmp	r0, #0
		BLT		BYE
 5d4:	ba00002c 	blt	68c <BYE>
		CMP		R0,		#79
 5d8:	e350004f 	cmp	r0, #79	; 0x4f
		BGT		BYE
 5dc:	ca00002a 	bgt	68c <BYE>
		CMP		R1,		#0
 5e0:	e3510000 	cmp	r1, #0
		BLT		BYE
 5e4:	ba000028 	blt	68c <BYE>
		CMP		R1,		$59
 5e8:	e351003b 	cmp	r1, #59	; 0x3b
		BGT		BYE
 5ec:	ca000026 	bgt	68c <BYE>
		ADD 	R3, 	R0, 	R1, 	LSL 	#7
 5f0:	e0803381 	add	r3, r0, r1, lsl #7
		LDR		R4,		=CHR_BUFF
 5f4:	e3a044c9 	mov	r4, #-922746880	; 0xc9000000
		ADD		R4,		R4,		R3
 5f8:	e0844003 	add	r4, r4, r3
		AND		R5,		R2,		#0xF	//Right
 5fc:	e202500f 	and	r5, r2, #15
		AND		R6,		R2,		#0xF0	//Left
 600:	e20260f0 	and	r6, r2, #240	; 0xf0
		LSR		R6,		#4
 604:	e1a06226 	lsr	r6, r6, #4
		CMP		R5,		#0xF
 608:	e355000f 	cmp	r5, #15
		POPGT	{R3-R7}
 60c:	c8bd00f8 	popgt	{r3, r4, r5, r6, r7}
		BGT		BYE
 610:	ca00001d 	bgt	68c <BYE>
		CMP		R6,		#0xF
 614:	e356000f 	cmp	r6, #15
		POPGT	{R3-R7}
 618:	c8bd00f8 	popgt	{r3, r4, r5, r6, r7}
		BGT		BYE
 61c:	ca00001a 	bgt	68c <BYE>
		CMP		R5,		#0
 620:	e3550000 	cmp	r5, #0
		POPLT	{R3-R7}
 624:	b8bd00f8 	poplt	{r3, r4, r5, r6, r7}
		BLT		BYE
 628:	ba000017 	blt	68c <BYE>
		CMP		R6,		#0
 62c:	e3560000 	cmp	r6, #0
		POPLT	{R3-R7}
 630:	b8bd00f8 	poplt	{r3, r4, r5, r6, r7}
		BLT		BYE
 634:	ba000014 	blt	68c <BYE>
		LDR		R2,		=DIC
 638:	e59f20dc 	ldr	r2, [pc, #220]	; 71c <DIC+0x10>
		LDRB	R1,		[R2,	R5]
 63c:	e7d21005 	ldrb	r1, [r2, r5]
		LDRB	R0,		[R2,	R6]
 640:	e7d20006 	ldrb	r0, [r2, r6]
		STRB	R0,		[R4]
 644:	e5c40000 	strb	r0, [r4]
		STRB	R1,		[R4,	#1]
 648:	e5c41001 	strb	r1, [r4, #1]
		POP		{R3-R7}
 64c:	e8bd00f8 	pop	{r3, r4, r5, r6, r7}
		B		BYE
 650:	ea00000d 	b	68c <BYE>

00000654 <VGA_write_char_ASM>:

VGA_write_char_ASM:
		PUSH 	{R3-R5}
 654:	e92d0038 	push	{r3, r4, r5}
		CMP		R0,		#0
 658:	e3500000 	cmp	r0, #0
		BLT		BYE
 65c:	ba00000a 	blt	68c <BYE>
		CMP		R0,		#79
 660:	e350004f 	cmp	r0, #79	; 0x4f
		BGT		BYE
 664:	ca000008 	bgt	68c <BYE>
		CMP		R1,		#0
 668:	e3510000 	cmp	r1, #0
		BLT		BYE
 66c:	ba000006 	blt	68c <BYE>
		CMP		R1,		#59
 670:	e351003b 	cmp	r1, #59	; 0x3b
		BGT		BYE
 674:	ca000004 	bgt	68c <BYE>
		LDR 	R5, 	=CHR_BUFF
 678:	e3a054c9 	mov	r5, #-922746880	; 0xc9000000
		ADD 	R3, 	R0, 	R1, 	LSL 	#7
 67c:	e0803381 	add	r3, r0, r1, lsl #7
		ADD 	R3, 	R3, 	R5
 680:	e0833005 	add	r3, r3, r5
		STRB 	R2, 	[R3]
 684:	e5c32000 	strb	r2, [r3]
		POP 	{R3-R5}
 688:	e8bd0038 	pop	{r3, r4, r5}

0000068c <BYE>:
BYE: 	BX 		LR
 68c:	e12fff1e 	bx	lr

00000690 <VGA_clear_charbuff_ASM>:

VGA_clear_charbuff_ASM:
		//R0 for x
		//R1 for y
		PUSH	{R0-R5}
 690:	e92d003f 	push	{r0, r1, r2, r3, r4, r5}
		MOV		R2,		#0
 694:	e3a02000 	mov	r2, #0
		LDR		R3,		=CHR_BUFF
 698:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
		MOV		R1,		#59
 69c:	e3a0103b 	mov	r1, #59	; 0x3b

000006a0 <CBRF>:
CBRF:	MOV		R0,		#79
 6a0:	e3a0004f 	mov	r0, #79	; 0x4f

000006a4 <CAL>:
CAL:	ADD		R4,		R0,		R1,		LSL		#7
 6a4:	e0804381 	add	r4, r0, r1, lsl #7
		ADD		R5,		R4,		R3
 6a8:	e0845003 	add	r5, r4, r3
		STRB	R2,		[R5]
 6ac:	e5c52000 	strb	r2, [r5]
		SUBS	R0,		R0,		#1
 6b0:	e2500001 	subs	r0, r0, #1
		BGE		CAL
 6b4:	aafffffa 	bge	6a4 <CAL>
		CMP		R1,		#0
 6b8:	e3510000 	cmp	r1, #0
		POPEQ	{R0-R5}
 6bc:	08bd003f 	popeq	{r0, r1, r2, r3, r4, r5}
		BEQ		BYE
 6c0:	0afffff1 	beq	68c <BYE>
		SUBS	R1,		R1,		#1
 6c4:	e2511001 	subs	r1, r1, #1
		B		CBRF
 6c8:	eafffff4 	b	6a0 <CBRF>

000006cc <VGA_clear_pixelbuff_ASM>:

VGA_clear_pixelbuff_ASM:
		//R0 for x
		//R1 for y
		PUSH	{R0-R5}
 6cc:	e92d003f 	push	{r0, r1, r2, r3, r4, r5}
		MOV		R2,		#0
 6d0:	e3a02000 	mov	r2, #0
		LDR		R3,		=PIX_BUFF
 6d4:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
		MOV		R1,		#239
 6d8:	e3a010ef 	mov	r1, #239	; 0xef

000006dc <PIRF>:
PIRF:	MOVW	R0,		#319
 6dc:	e300013f 	movw	r0, #319	; 0x13f

000006e0 <CAL2>:
CAL2:	ADD		R4,		R0,		R1,		LSL		#9
 6e0:	e0804481 	add	r4, r0, r1, lsl #9
		ADD		R5,		R3,		R4,		LSL		#1
 6e4:	e0835084 	add	r5, r3, r4, lsl #1
		STRH	R2,		[R5]
 6e8:	e1c520b0 	strh	r2, [r5]
		SUBS	R0,		R0,		#1
 6ec:	e2500001 	subs	r0, r0, #1
		BGE		CAL2
 6f0:	aafffffa 	bge	6e0 <CAL2>
		CMP		R1,		#0
 6f4:	e3510000 	cmp	r1, #0
		POPEQ	{R0-R5}
 6f8:	08bd003f 	popeq	{r0, r1, r2, r3, r4, r5}
		BEQ		BYE
 6fc:	0affffe2 	beq	68c <BYE>
		SUBS	R1,		R1,		#1
 700:	e2511001 	subs	r1, r1, #1
		B		PIRF
 704:	eafffff4 	b	6dc <PIRF>

00000708 <DUMMY>:

DUMMY:
		BX		LR
 708:	e12fff1e 	bx	lr

0000070c <DIC>:
 70c:	33323130 	.word	0x33323130
 710:	37363534 	.word	0x37363534
 714:	42413938 	.word	0x42413938
 718:	46454443 	.word	0x46454443
		POPLT	{R3-R7}
		BLT		BYE
		CMP		R6,		#0
		POPLT	{R3-R7}
		BLT		BYE
		LDR		R2,		=DIC
 71c:	0000070c 	.word	0x0000070c

00000720 <read_PB_data_ASM>:
        .global PB_clear_edgecp_ASM
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
 720:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_DATA
 724:	e59f10a8 	ldr	r1, [pc, #168]	; 7d4 <disable_PB_INT_ASM+0x1c>
		LDR R0, [R1]
 728:	e5910000 	ldr	r0, [r1]
        POP {R1, LR}
 72c:	e8bd4002 	pop	{r1, lr}
        BX LR
 730:	e12fff1e 	bx	lr

00000734 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
        PUSH {R1, R2}
 734:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_DATA
 738:	e59f1094 	ldr	r1, [pc, #148]	; 7d4 <disable_PB_INT_ASM+0x1c>
        LDR R2, [R1]
 73c:	e5912000 	ldr	r2, [r1]
		TST R2, R0
 740:	e1120000 	tst	r2, r0
		MOVEQ R0, #0
 744:	03a00000 	moveq	r0, #0
		MOVNE R0, #1
 748:	13a00001 	movne	r0, #1
        POP {R1, R2}
 74c:	e8bd0006 	pop	{r1, r2}
        BX LR
 750:	e12fff1e 	bx	lr

00000754 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
        PUSH {R1}
 754:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
        LDR R1, =PB_EDGE_CAP
 758:	e59f1078 	ldr	r1, [pc, #120]	; 7d8 <disable_PB_INT_ASM+0x20>
        LDR R0, [R1]
 75c:	e5910000 	ldr	r0, [r1]
        POP {R1}
 760:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
        BX LR
 764:	e12fff1e 	bx	lr

00000768 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
        PUSH {R1, R2}
 768:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_EDGE_CAP
 76c:	e59f1064 	ldr	r1, [pc, #100]	; 7d8 <disable_PB_INT_ASM+0x20>
        LDR R2, [R1]
 770:	e5912000 	ldr	r2, [r1]
		TST R2, R0
 774:	e1120000 	tst	r2, r0
		MOVEQ R0, #0
 778:	03a00000 	moveq	r0, #0
		MOVNE R0, #1
 77c:	13a00001 	movne	r0, #1
        POP {R1, R2}
 780:	e8bd0006 	pop	{r1, r2}
        BX LR
 784:	e12fff1e 	bx	lr

00000788 <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:
        PUSH {R1}
 788:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
        LDR R1, =PB_EDGE_CAP
 78c:	e59f1044 	ldr	r1, [pc, #68]	; 7d8 <disable_PB_INT_ASM+0x20>
        STR R0, [R1]
 790:	e5810000 	str	r0, [r1]
        POP {R1}
 794:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
        BX LR
 798:	e12fff1e 	bx	lr

0000079c <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
        PUSH {R1, R2}
 79c:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 7a0:	e59f1034 	ldr	r1, [pc, #52]	; 7dc <disable_PB_INT_ASM+0x24>
        LDR R2, [R1]
 7a4:	e5912000 	ldr	r2, [r1]
        ORR R2, R2, R0
 7a8:	e1822000 	orr	r2, r2, r0
        STR R2, [R1]
 7ac:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 7b0:	e8bd0006 	pop	{r1, r2}
        BX LR
 7b4:	e12fff1e 	bx	lr

000007b8 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
        PUSH {R1, R2}
 7b8:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 7bc:	e59f1018 	ldr	r1, [pc, #24]	; 7dc <disable_PB_INT_ASM+0x24>
        LDR R2, [R1]
 7c0:	e5912000 	ldr	r2, [r1]
        BIC R2, R2, R0
 7c4:	e1c22000 	bic	r2, r2, r0
        STR R2, [R1]
 7c8:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 7cc:	e8bd0006 	pop	{r1, r2}
        BX LR
 7d0:	e12fff1e 	bx	lr
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
        LDR R1, =PB_DATA
 7d4:	ff200050 	.word	0xff200050
        POP {R1, R2}
        BX LR

read_PB_edgecap_ASM:
        PUSH {R1}
        LDR R1, =PB_EDGE_CAP
 7d8:	ff20005c 	.word	0xff20005c
        POP {R1}
        BX LR

enable_PB_INT_ASM:
        PUSH {R1, R2}
        LDR R1, =PB_INTR_MSK
 7dc:	ff200058 	.word	0xff200058

000007e0 <read_slider_switches_ASM>:
    .text
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM:
    PUSH {R1}
 7e0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    LDR R1, =SW_BASE
 7e4:	e59f1008 	ldr	r1, [pc, #8]	; 7f4 <read_slider_switches_ASM+0x14>
    LDR R0, [R1]
 7e8:	e5910000 	ldr	r0, [r1]
    POP {R1}
 7ec:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    BX LR
 7f0:	e12fff1e 	bx	lr
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM:
    PUSH {R1}
    LDR R1, =SW_BASE
 7f4:	ff200040 	.word	0xff200040

000007f8 <read_PS2_data_ASM>:
		.text
		.equ	KB,		0xFF200100
		.global	read_PS2_data_ASM

read_PS2_data_ASM:
		PUSH	{R1-R3}
 7f8:	e92d000e 	push	{r1, r2, r3}
		LDR		R1,		=KB
 7fc:	e59f1020 	ldr	r1, [pc, #32]	; 824 <END+0xc>
		LDR		R2,		[R1]
 800:	e5912000 	ldr	r2, [r1]
		AND		R1,		R2,		#0x8000
 804:	e2021902 	and	r1, r2, #32768	; 0x8000
		LSRS	R3,		R1,		#15
 808:	e1b037a1 	lsrs	r3, r1, #15
		BEQ		END
 80c:	0a000001 	beq	818 <END>
		ANDS	R1,		R2,		#0xFF
 810:	e21210ff 	ands	r1, r2, #255	; 0xff
		STRB	R1,		[R0]
 814:	e5c01000 	strb	r1, [r0]

00000818 <END>:

END:
		MOV		R0,		R3
 818:	e1a00003 	mov	r0, r3
		POP		{R1-R3}
 81c:	e8bd000e 	pop	{r1, r2, r3}
		BX		LR
 820:	e12fff1e 	bx	lr
		.equ	KB,		0xFF200100
		.global	read_PS2_data_ASM

read_PS2_data_ASM:
		PUSH	{R1-R3}
		LDR		R1,		=KB
 824:	ff200100 	.word	0xff200100

00000828 <atexit>:
 828:	e1a01000 	mov	r1, r0
 82c:	e3a00000 	mov	r0, #0
 830:	e92d4008 	push	{r3, lr}
 834:	e1a02000 	mov	r2, r0
 838:	e1a03000 	mov	r3, r0
 83c:	eb00000e 	bl	87c <__register_exitproc>
 840:	e8bd4008 	pop	{r3, lr}
 844:	e12fff1e 	bx	lr

00000848 <exit>:
 848:	e92d4008 	push	{r3, lr}
 84c:	e3a01000 	mov	r1, #0
 850:	e1a04000 	mov	r4, r0
 854:	eb000045 	bl	970 <__call_exitprocs>
 858:	e59f3018 	ldr	r3, [pc, #24]	; 878 <exit+0x30>
 85c:	e5930000 	ldr	r0, [r3]
 860:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 864:	e3530000 	cmp	r3, #0
 868:	11a0e00f 	movne	lr, pc
 86c:	112fff13 	bxne	r3
 870:	e1a00004 	mov	r0, r4
 874:	eb0000c9 	bl	ba0 <_exit>
 878:	00000c60 	.word	0x00000c60

0000087c <__register_exitproc>:
 87c:	e59fc0e4 	ldr	r12, [pc, #228]	; 968 <__register_exitproc+0xec>
 880:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 884:	e59c4000 	ldr	r4, [r12]
 888:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 88c:	e35c0000 	cmp	r12, #0
 890:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 894:	e59c5004 	ldr	r5, [r12, #4]
 898:	0584c148 	streq	r12, [r4, #328]	; 0x148
 89c:	e355001f 	cmp	r5, #31
 8a0:	e24dd010 	sub	sp, sp, #16
 8a4:	e1a06000 	mov	r6, r0
 8a8:	da000015 	ble	904 <__register_exitproc+0x88>
 8ac:	e59f00b8 	ldr	r0, [pc, #184]	; 96c <__register_exitproc+0xf0>
 8b0:	e3500000 	cmp	r0, #0
 8b4:	1a000001 	bne	8c0 <__register_exitproc+0x44>
 8b8:	e3e00000 	mvn	r0, #0
 8bc:	ea000018 	b	924 <__register_exitproc+0xa8>
 8c0:	e3a00e19 	mov	r0, #400	; 0x190
 8c4:	e58d100c 	str	r1, [sp, #12]
 8c8:	e58d2008 	str	r2, [sp, #8]
 8cc:	e58d3004 	str	r3, [sp, #4]
 8d0:	e320f000 	nop	{0}
 8d4:	e250c000 	subs	r12, r0, #0
 8d8:	e59d100c 	ldr	r1, [sp, #12]
 8dc:	e59d2008 	ldr	r2, [sp, #8]
 8e0:	e59d3004 	ldr	r3, [sp, #4]
 8e4:	0afffff3 	beq	8b8 <__register_exitproc+0x3c>
 8e8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 8ec:	e3a00000 	mov	r0, #0
 8f0:	e58c0004 	str	r0, [r12, #4]
 8f4:	e58c5000 	str	r5, [r12]
 8f8:	e584c148 	str	r12, [r4, #328]	; 0x148
 8fc:	e58c0188 	str	r0, [r12, #392]	; 0x188
 900:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 904:	e3560000 	cmp	r6, #0
 908:	e59c4004 	ldr	r4, [r12, #4]
 90c:	1a000007 	bne	930 <__register_exitproc+0xb4>
 910:	e2843002 	add	r3, r4, #2
 914:	e2844001 	add	r4, r4, #1
 918:	e78c1103 	str	r1, [r12, r3, lsl #2]
 91c:	e58c4004 	str	r4, [r12, #4]
 920:	e3a00000 	mov	r0, #0
 924:	e28dd010 	add	sp, sp, #16
 928:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 92c:	e12fff1e 	bx	lr
 930:	e3a00001 	mov	r0, #1
 934:	e1a00410 	lsl	r0, r0, r4
 938:	e08c8104 	add	r8, r12, r4, lsl #2
 93c:	e3560002 	cmp	r6, #2
 940:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 944:	e5883108 	str	r3, [r8, #264]	; 0x108
 948:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 94c:	e1877000 	orr	r7, r7, r0
 950:	01830000 	orreq	r0, r3, r0
 954:	e1a05008 	mov	r5, r8
 958:	e5882088 	str	r2, [r8, #136]	; 0x88
 95c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 960:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 964:	eaffffe9 	b	910 <__register_exitproc+0x94>
 968:	00000c60 	.word	0x00000c60
 96c:	00000000 	.word	0x00000000

00000970 <__call_exitprocs>:
 970:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 974:	e59f3168 	ldr	r3, [pc, #360]	; ae4 <__call_exitprocs+0x174>
 978:	e5933000 	ldr	r3, [r3]
 97c:	e24dd014 	sub	sp, sp, #20
 980:	e58d3004 	str	r3, [sp, #4]
 984:	e2833f52 	add	r3, r3, #328	; 0x148
 988:	e58d0008 	str	r0, [sp, #8]
 98c:	e58d300c 	str	r3, [sp, #12]
 990:	e1a07001 	mov	r7, r1
 994:	e3a08001 	mov	r8, #1
 998:	e59d3004 	ldr	r3, [sp, #4]
 99c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 9a0:	e3560000 	cmp	r6, #0
 9a4:	e59db00c 	ldr	r11, [sp, #12]
 9a8:	0a000033 	beq	a7c <__call_exitprocs+0x10c>
 9ac:	e5965004 	ldr	r5, [r6, #4]
 9b0:	e2554001 	subs	r4, r5, #1
 9b4:	5286a088 	addpl	r10, r6, #136	; 0x88
 9b8:	5285501f 	addpl	r5, r5, #31
 9bc:	508a5105 	addpl	r5, r10, r5, lsl #2
 9c0:	5a000007 	bpl	9e4 <__call_exitprocs+0x74>
 9c4:	ea000029 	b	a70 <__call_exitprocs+0x100>
 9c8:	e5953000 	ldr	r3, [r5]
 9cc:	e1530007 	cmp	r3, r7
 9d0:	0a000005 	beq	9ec <__call_exitprocs+0x7c>
 9d4:	e2444001 	sub	r4, r4, #1
 9d8:	e3740001 	cmn	r4, #1
 9dc:	e2455004 	sub	r5, r5, #4
 9e0:	0a000022 	beq	a70 <__call_exitprocs+0x100>
 9e4:	e3570000 	cmp	r7, #0
 9e8:	1afffff6 	bne	9c8 <__call_exitprocs+0x58>
 9ec:	e5963004 	ldr	r3, [r6, #4]
 9f0:	e06a2005 	rsb	r2, r10, r5
 9f4:	e2433001 	sub	r3, r3, #1
 9f8:	e0862002 	add	r2, r6, r2
 9fc:	e1530004 	cmp	r3, r4
 a00:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 a04:	13a01000 	movne	r1, #0
 a08:	05864004 	streq	r4, [r6, #4]
 a0c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 a10:	e3530000 	cmp	r3, #0
 a14:	0affffee 	beq	9d4 <__call_exitprocs+0x64>
 a18:	e1a02418 	lsl	r2, r8, r4
 a1c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 a20:	e1120001 	tst	r2, r1
 a24:	e5969004 	ldr	r9, [r6, #4]
 a28:	0a000016 	beq	a88 <__call_exitprocs+0x118>
 a2c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 a30:	e1120001 	tst	r2, r1
 a34:	1a000016 	bne	a94 <__call_exitprocs+0x124>
 a38:	e59d0008 	ldr	r0, [sp, #8]
 a3c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 a40:	e1a0e00f 	mov	lr, pc
 a44:	e12fff13 	bx	r3
 a48:	e5963004 	ldr	r3, [r6, #4]
 a4c:	e1530009 	cmp	r3, r9
 a50:	1affffd0 	bne	998 <__call_exitprocs+0x28>
 a54:	e59b3000 	ldr	r3, [r11]
 a58:	e1530006 	cmp	r3, r6
 a5c:	1affffcd 	bne	998 <__call_exitprocs+0x28>
 a60:	e2444001 	sub	r4, r4, #1
 a64:	e3740001 	cmn	r4, #1
 a68:	e2455004 	sub	r5, r5, #4
 a6c:	1affffdc 	bne	9e4 <__call_exitprocs+0x74>
 a70:	e59f1070 	ldr	r1, [pc, #112]	; ae8 <__call_exitprocs+0x178>
 a74:	e3510000 	cmp	r1, #0
 a78:	1a000009 	bne	aa4 <__call_exitprocs+0x134>
 a7c:	e28dd014 	add	sp, sp, #20
 a80:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a84:	e12fff1e 	bx	lr
 a88:	e1a0e00f 	mov	lr, pc
 a8c:	e12fff13 	bx	r3
 a90:	eaffffec 	b	a48 <__call_exitprocs+0xd8>
 a94:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 a98:	e1a0e00f 	mov	lr, pc
 a9c:	e12fff13 	bx	r3
 aa0:	eaffffe8 	b	a48 <__call_exitprocs+0xd8>
 aa4:	e5963004 	ldr	r3, [r6, #4]
 aa8:	e3530000 	cmp	r3, #0
 aac:	e5963000 	ldr	r3, [r6]
 ab0:	1a000008 	bne	ad8 <__call_exitprocs+0x168>
 ab4:	e3530000 	cmp	r3, #0
 ab8:	0a000006 	beq	ad8 <__call_exitprocs+0x168>
 abc:	e1a00006 	mov	r0, r6
 ac0:	e58b3000 	str	r3, [r11]
 ac4:	e320f000 	nop	{0}
 ac8:	e59b6000 	ldr	r6, [r11]
 acc:	e3560000 	cmp	r6, #0
 ad0:	1affffb5 	bne	9ac <__call_exitprocs+0x3c>
 ad4:	eaffffe8 	b	a7c <__call_exitprocs+0x10c>
 ad8:	e1a0b006 	mov	r11, r6
 adc:	e1a06003 	mov	r6, r3
 ae0:	eafffff9 	b	acc <__call_exitprocs+0x15c>
 ae4:	00000c60 	.word	0x00000c60
 ae8:	00000000 	.word	0x00000000

00000aec <register_fini>:
 aec:	e92d4008 	push	{r3, lr}
 af0:	e59f3010 	ldr	r3, [pc, #16]	; b08 <register_fini+0x1c>
 af4:	e3530000 	cmp	r3, #0
 af8:	159f000c 	ldrne	r0, [pc, #12]	; b0c <register_fini+0x20>
 afc:	1bffff49 	blne	828 <atexit>
 b00:	e8bd4008 	pop	{r3, lr}
 b04:	e12fff1e 	bx	lr
 b08:	00000c88 	.word	0x00000c88
 b0c:	00000b10 	.word	0x00000b10

00000b10 <__libc_fini_array>:
 b10:	e92d4038 	push	{r3, r4, r5, lr}
 b14:	e59f5030 	ldr	r5, [pc, #48]	; b4c <__libc_fini_array+0x3c>
 b18:	e59f4030 	ldr	r4, [pc, #48]	; b50 <__libc_fini_array+0x40>
 b1c:	e0654004 	rsb	r4, r5, r4
 b20:	e1b04144 	asrs	r4, r4, #2
 b24:	10855104 	addne	r5, r5, r4, lsl #2
 b28:	0a000004 	beq	b40 <__libc_fini_array+0x30>
 b2c:	e5353004 	ldr	r3, [r5, #-4]!
 b30:	e1a0e00f 	mov	lr, pc
 b34:	e12fff13 	bx	r3
 b38:	e2544001 	subs	r4, r4, #1
 b3c:	1afffffa 	bne	b2c <__libc_fini_array+0x1c>
 b40:	eb000050 	bl	c88 <__libc_fini>
 b44:	e8bd4038 	pop	{r3, r4, r5, lr}
 b48:	e12fff1e 	bx	lr
 b4c:	00000ca0 	.word	0x00000ca0
 b50:	00000ca4 	.word	0x00000ca4

00000b54 <__cs3_premain>:
 b54:	e92d4008 	push	{r3, lr}
 b58:	eb00001d 	bl	bd4 <__libc_init_array>
 b5c:	e59f3030 	ldr	r3, [pc, #48]	; b94 <__cs3_premain+0x40>
 b60:	e3530000 	cmp	r3, #0
 b64:	15930000 	ldrne	r0, [r3]
 b68:	01a00003 	moveq	r0, r3
 b6c:	e59f3024 	ldr	r3, [pc, #36]	; b98 <__cs3_premain+0x44>
 b70:	e3530000 	cmp	r3, #0
 b74:	15931000 	ldrne	r1, [r3]
 b78:	01a01003 	moveq	r1, r3
 b7c:	e3a02000 	mov	r2, #0
 b80:	ebfffe7a 	bl	570 <main>
 b84:	e59f3010 	ldr	r3, [pc, #16]	; b9c <__cs3_premain+0x48>
 b88:	e3530000 	cmp	r3, #0
 b8c:	1bffff2d 	blne	848 <exit>
 b90:	eafffffe 	b	b90 <__cs3_premain+0x3c>
	...
 b9c:	00000848 	.word	0x00000848

00000ba0 <_exit>:
 ba0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ba4:	e3a00018 	mov	r0, #24
 ba8:	e59f1004 	ldr	r1, [pc, #4]	; bb4 <_exit+0x14>
 bac:	ef123456 	svc	0x00123456
 bb0:	eafffffe 	b	bb0 <_exit+0x10>
 bb4:	00020026 	.word	0x00020026

00000bb8 <__cs3_isr_interrupt>:
 bb8:	eafffffe 	b	bb8 <__cs3_isr_interrupt>

00000bbc <__cs3_isr_undef>:
 bbc:	eafffffe 	b	bbc <__cs3_isr_undef>

00000bc0 <__cs3_isr_swi>:
 bc0:	eafffffe 	b	bc0 <__cs3_isr_swi>

00000bc4 <__cs3_isr_pabort>:
 bc4:	eafffffe 	b	bc4 <__cs3_isr_pabort>

00000bc8 <__cs3_isr_dabort>:
 bc8:	eafffffe 	b	bc8 <__cs3_isr_dabort>

00000bcc <__cs3_isr_irq>:
 bcc:	eafffffe 	b	bcc <__cs3_isr_irq>

00000bd0 <__cs3_isr_fiq>:
 bd0:	eafffffe 	b	bd0 <__cs3_isr_fiq>

00000bd4 <__libc_init_array>:
 bd4:	e92d4070 	push	{r4, r5, r6, lr}
 bd8:	e59f506c 	ldr	r5, [pc, #108]	; c4c <__libc_init_array+0x78>
 bdc:	e59f606c 	ldr	r6, [pc, #108]	; c50 <__libc_init_array+0x7c>
 be0:	e0656006 	rsb	r6, r5, r6
 be4:	e1b06146 	asrs	r6, r6, #2
 be8:	12455004 	subne	r5, r5, #4
 bec:	13a04000 	movne	r4, #0
 bf0:	0a000005 	beq	c0c <__libc_init_array+0x38>
 bf4:	e5b53004 	ldr	r3, [r5, #4]!
 bf8:	e2844001 	add	r4, r4, #1
 bfc:	e1a0e00f 	mov	lr, pc
 c00:	e12fff13 	bx	r3
 c04:	e1560004 	cmp	r6, r4
 c08:	1afffff9 	bne	bf4 <__libc_init_array+0x20>
 c0c:	e59f5040 	ldr	r5, [pc, #64]	; c54 <__libc_init_array+0x80>
 c10:	e59f6040 	ldr	r6, [pc, #64]	; c58 <__libc_init_array+0x84>
 c14:	e0656006 	rsb	r6, r5, r6
 c18:	eb000012 	bl	c68 <_init>
 c1c:	e1b06146 	asrs	r6, r6, #2
 c20:	12455004 	subne	r5, r5, #4
 c24:	13a04000 	movne	r4, #0
 c28:	0a000005 	beq	c44 <__libc_init_array+0x70>
 c2c:	e5b53004 	ldr	r3, [r5, #4]!
 c30:	e2844001 	add	r4, r4, #1
 c34:	e1a0e00f 	mov	lr, pc
 c38:	e12fff13 	bx	r3
 c3c:	e1560004 	cmp	r6, r4
 c40:	1afffff9 	bne	c2c <__libc_init_array+0x58>
 c44:	e8bd4070 	pop	{r4, r5, r6, lr}
 c48:	e12fff1e 	bx	lr
 c4c:	00000c80 	.word	0x00000c80
 c50:	00000c80 	.word	0x00000c80
 c54:	00000c80 	.word	0x00000c80
 c58:	00000c88 	.word	0x00000c88

Disassembly of section .rodata:

00000c60 <_global_impure_ptr>:
 c60:	00000cc8 00000043                       ....C...

00000c68 <_init>:
 c68:	e1a0c00d 	mov	r12, sp
 c6c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c70:	e24cb004 	sub	r11, r12, #4
 c74:	e24bd028 	sub	sp, r11, #40	; 0x28
 c78:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c7c:	e12fff1e 	bx	lr

00000c80 <__init_array_start>:
 c80:	00000aec 	.word	0x00000aec

00000c84 <__frame_dummy_init_array_entry>:
 c84:	00000208                                ....

00000c88 <__libc_fini>:
 c88:	e1a0c00d 	mov	r12, sp
 c8c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c90:	e24cb004 	sub	r11, r12, #4
 c94:	e24bd028 	sub	sp, r11, #40	; 0x28
 c98:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c9c:	e12fff1e 	bx	lr

00000ca0 <__fini_array_start>:
 ca0:	000001c4 	.word	0x000001c4

00000ca4 <__cs3_regions>:
	...
 cb0:	000010f8 	.word	0x000010f8
 cb4:	00000020 	.word	0x00000020
